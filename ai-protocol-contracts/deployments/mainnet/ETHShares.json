{
  "address": "0x68BCCdAf0e9c89FD8fE88E78eF2A0c5Ffa307878",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_sharesSubject",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeDestination",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_protocolFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "contract HoldersRewardsDistributor",
          "name": "_holdersFeeDestination",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_holdersFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_subjectFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolFeePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolFeePercent",
          "type": "uint256"
        }
      ],
      "name": "HoldersFeeDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldProtocolFeeDestination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProtocolFeeDestination",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeDestinationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assigned",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "oldSubject",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "newSubject",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "contract SharesFactory",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "SharesSubjectUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "holdersFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subjectFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_HOLDERS_FEE_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_PROTOCOL_FEE_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_SHARES_SUBJECT_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_UPGRADE_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyShares",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buySharesTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableHoldersFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_holdersFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subjectFeePercent",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBuyPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHoldersFeeDestination",
      "outputs": [
        {
          "internalType": "contract HoldersRewardsDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHoldersFeeInfo",
      "outputs": [
        {
          "internalType": "contract HoldersRewardsDistributor",
          "name": "feeDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHoldersFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "s",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_holdersFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subjectFeePercent",
          "type": "uint256"
        }
      ],
      "name": "getSellPriceAfterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "getSharesBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSharesIssuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "nftOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSharesSubject",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSharesSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubjectFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubjectFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_sharesSubject",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeDestination",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_protocolFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "contract HoldersRewardsDistributor",
          "name": "_holdersFeeDestination",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_holdersFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_subjectFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "postConstruct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "sellSharesTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeDestination",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_sharesSubject",
          "type": "tuple"
        }
      ],
      "name": "updateSharesSubject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_sharesSubject",
          "type": "tuple"
        },
        {
          "internalType": "contract SharesFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "updateSharesSubject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3170dab35e54622c56fe1df8a982093fbeadef367fb33fa1301063df4f47d1d",
  "receipt": {
    "to": null,
    "from": "0x511B96673B06C37daA18cc3DFB3920F616B49eb1",
    "contractAddress": "0x68BCCdAf0e9c89FD8fE88E78eF2A0c5Ffa307878",
    "transactionIndex": 39,
    "gasUsed": "1873050",
    "logsBloom": "0x
    "blockHash": "0x5243c991e3b56fff7ecde01132c0279e90fc5e849a644ceba0cd8b4a2336e78a",
    "transactionHash": "0xc3170dab35e54622c56fe1df8a982093fbeadef367fb33fa1301063df4f47d1d",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 18668280,
        "transactionHash": "0xc3170dab35e54622c56fe1df8a982093fbeadef367fb33fa1301063df4f47d1d",
        "address": "0x68BCCdAf0e9c89FD8fE88E78eF2A0c5Ffa307878",
        "topics": [
          "0xe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 191,
        "blockHash": "0x5243c991e3b56fff7ecde01132c0279e90fc5e849a644ceba0cd8b4a2336e78a"
      }
    ],
    "blockNumber": 18668280,
    "cumulativeGasUsed": "8974356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    {
      "tokenAddress": "0x0000000000000000000000000000000000000000",
      "tokenId": "0"
    },
    "0x0000000000000000000000000000000000000000",
    0,
    "0x0000000000000000000000000000000000000000",
    0,
    0,
    0,
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e8144a94af8f6377d8e8f9de0f77ff0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_sharesSubject\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"contract HoldersRewardsDistributor\",\"name\":\"_holdersFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_holdersFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_subjectFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeePercent\",\"type\":\"uint256\"}],\"name\":\"HoldersFeeDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldProtocolFeeDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProtocolFeeDestination\",\"type\":\"address\"}],\"name\":\"ProtocolFeeDestinationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assigned\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"oldSubject\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"newSubject\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"contract SharesFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SharesSubjectUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_HOLDERS_FEE_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_PROTOCOL_FEE_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_SHARES_SUBJECT_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_UPGRADE_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyShares\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buySharesTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableHoldersFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subjectFeePercent\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldersFeeDestination\",\"outputs\":[{\"internalType\":\"contract HoldersRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldersFeeInfo\",\"outputs\":[{\"internalType\":\"contract HoldersRewardsDistributor\",\"name\":\"feeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldersFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subjectFeePercent\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getSharesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharesIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharesSubject\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharesSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubjectFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_sharesSubject\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"contract HoldersRewardsDistributor\",\"name\":\"_holdersFeeDestination\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_holdersFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_subjectFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"postConstruct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"sellSharesTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeDestination\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_sharesSubject\",\"type\":\"tuple\"}],\"name\":\"updateSharesSubject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_sharesSubject\",\"type\":\"tuple\"},{\"internalType\":\"contract SharesFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"updateSharesSubject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on the friend.tech FriendtechSharesV1.sol\",\"kind\":\"dev\",\"methods\":{\"buyShares(uint256)\":{\"details\":\"Depending on the implementation, ERC20 token payment may be required instead of ETH.      In such a case, implementation must through if ETH is sent, effectively overriding      the function definition as non-payable\",\"params\":{\"amount\":\"amount of the shares to buy\"}},\"buySharesTo(uint256,address)\":{\"details\":\"Depending on the implementation, ERC20 token payment may be required instead of ETH.      In such a case, implementation must through if ETH is sent, effectively overriding      the function definition as non-payable\",\"params\":{\"amount\":\"amount of the shares to buy\",\"beneficiary\":\"an address receiving the shares\"}},\"constructor\":{\"details\":\"Deploys the ETHShares instance and initializes it\",\"params\":{\"_amount\":\"how many shares to buy immediately upon \\\"post-construction\\\", can be zero\",\"_beneficiary\":\"the address receiving the shares bought immediately (must be set      if `_amount` is not zero)\",\"_holdersFeeDestination\":\"shares holders fee destination, the HoldersRewardsDistributor contract      the shares holders fee is sent to\",\"_holdersFeePercent\":\"shares holders fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\",\"_owner\":\"the address receiving all the RBAC permissions on the contract\",\"_protocolFeeDestination\":\"protocol fee destination, the address protocol fee is sent to\",\"_protocolFeePercent\":\"protocol fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\",\"_sharesSubject\":\"shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\",\"_subjectFeePercent\":\"subject fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"getBuyPrice(uint256)\":{\"params\":{\"amount\":\"number of shares to buy\"},\"returns\":{\"_0\":\"the price of the shares to buy\"}},\"getBuyPrice(uint256,uint256)\":{\"params\":{\"amount\":\"number of shares to buy\",\"supply\":\"total shares supply\"},\"returns\":{\"_0\":\"the price of the shares to buy\"}},\"getBuyPriceAfterFee(uint256)\":{\"params\":{\"amount\":\"number of shares to buy\"},\"returns\":{\"_0\":\"the price of the shares to buy\"}},\"getBuyPriceAfterFee(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"number of shares to buy\",\"holdersFeePercent\":\"shares holders fee percent\",\"protocolFeePercent\":\"protocol fee percent\",\"subjectFeePercent\":\"protocol fee percent\",\"supply\":\"total shares supply\"},\"returns\":{\"_0\":\"the price of the shares to buy\"}},\"getHoldersFeeDestination()\":{\"details\":\"Immutable, client applications may cache this value; holders fee destination is not      an arbitrary address capable of receiving ETH or ERC20, but a HoldersRewardsDistributor      smart contract, which not only receives the fees but also receives updated on the      trading activity in the shares contract\",\"returns\":{\"_0\":\"the contract where the holders fee is sent to\"}},\"getHoldersFeeInfo()\":{\"details\":\"Implementation must always return zero fee percent if fee destination is zero\",\"returns\":{\"feeDestination\":\"shares holders fee destination\",\"feePercent\":\"shares holders fee percent, zero if holders fee destination is zero\"}},\"getHoldersFeePercent()\":{\"details\":\"Immutable, client applications may cache this value\",\"returns\":{\"_0\":\"shares holders fee percent with the 18 decimals (10^18 is 100%)\"}},\"getPrice(uint256,uint256)\":{\"params\":{\"a\":\"amount, number of shares to buy/sell\",\"s\":\"supply, total shares supply\"},\"returns\":{\"_0\":\"the price of the shares (all `amount` amount)\"}},\"getProtocolFeeDestination()\":{\"details\":\"Mutable, can be changed by the protocol fee manager\",\"returns\":{\"_0\":\"the address where the protocol fee is sent to\"}},\"getProtocolFeeInfo()\":{\"details\":\"Implementation must always return zero fee percent if fee destination is zero address\",\"returns\":{\"feeDestination\":\"protocol fee destination\",\"feePercent\":\"protocol fee percent, zero if protocol fee destination is zero\"}},\"getProtocolFeePercent()\":{\"details\":\"Immutable, client applications may cache this value\",\"returns\":{\"_0\":\"protocol fee percent with the 18 decimals (10^18 is 100%)\"}},\"getRole(address)\":{\"details\":\"Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts\",\"params\":{\"operator\":\"address of a user to read permissions for,      or self address to read global features of the smart contract\"}},\"getSellPrice(uint256)\":{\"params\":{\"amount\":\"number of shares to sell\"},\"returns\":{\"_0\":\"the price of the shares to sell\"}},\"getSellPrice(uint256,uint256)\":{\"params\":{\"amount\":\"number of shares to sell\",\"supply\":\"total shares supply\"},\"returns\":{\"_0\":\"the price of the shares to sell\"}},\"getSellPriceAfterFee(uint256)\":{\"params\":{\"amount\":\"number of shares to sell\"},\"returns\":{\"_0\":\"the price of the shares to sell\"}},\"getSellPriceAfterFee(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"number of shares to sell\",\"holdersFeePercent\":\"shares holders fee percent\",\"protocolFeePercent\":\"protocol fee percent\",\"subjectFeePercent\":\"protocol fee percent\",\"supply\":\"total shares supply\"},\"returns\":{\"_0\":\"the price of the shares to sell\"}},\"getSharesBalance(address)\":{\"params\":{\"holder\":\"the address to check the balance for\"},\"returns\":{\"balance\":\"number of shares the holder has\"}},\"getSharesIssuer()\":{\"details\":\"Mutable, changes (potentially frequently and unpredictably) when the NFT owner changes;      subject to the front-run attacks, off-chain client applications must not rely on this address      in anyway\",\"returns\":{\"nftOwner\":\"subject issuer, the owner of the NFT\"}},\"getSharesSubject()\":{\"details\":\"Immutable, client applications may cache this value\",\"returns\":{\"_0\":\"Shares subject as a SharesSubject struct, this is an NFT if all currently known implementations\"}},\"getSharesSupply()\":{\"returns\":{\"supply\":\"total shares supply\"}},\"getSubjectFeeInfo()\":{\"details\":\"Implementation must always return zero fee percent if fee destination is zero address\",\"returns\":{\"feeDestination\":\"protocol fee destination\",\"feePercent\":\"protocol fee percent, zero if subject fee destination is zero\"}},\"getSubjectFeePercent()\":{\"details\":\"Immutable, client applications may cache this value\",\"returns\":{\"_0\":\"subject fee percent with the 18 decimals (10^18 is 100%)\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isSenderInRole(uint256)\":{\"details\":\"Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\",\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"postConstruct(address,(address,uint256),address,uint64,address,uint64,uint64,uint256,address)\":{\"details\":\"\\\"Constructor replacement\\\" for initializable, must be execute during or immediately after deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\",\"params\":{\"_amount\":\"how many shares to buy immediately upon \\\"post-construction\\\", can be zero\",\"_beneficiary\":\"the address receiving the shares bought immediately (must be set      if `_amount` is not zero)\",\"_holdersFeeDestination\":\"shares holders fee destination, the HoldersRewardsDistributor contract      the shares holders fee is sent to\",\"_holdersFeePercent\":\"shares holders fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\",\"_owner\":\"the address receiving all the RBAC permissions on the contract\",\"_protocolFeeDestination\":\"protocol fee destination, the address protocol fee is sent to\",\"_protocolFeePercent\":\"protocol fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\",\"_sharesSubject\":\"shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\",\"_subjectFeePercent\":\"subject fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\"}},\"sellShares(uint256)\":{\"details\":\"Depending on the implementation, ERC20 token may be payed instead of ETH.\",\"params\":{\"amount\":\"amount of the shares to sell\"}},\"sellSharesTo(uint256,address)\":{\"details\":\"Depending on the implementation, ERC20 token may be payed instead of ETH.\",\"params\":{\"amount\":\"amount of the shares to sell\",\"beneficiary\":\"an address receiving the funds from the sale\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateProtocolFeeDestination(address)\":{\"details\":\"This is a restricted access function which should be accessible only from the      MultiSig wallet controlling the protocol, so that its usage is not scalable\",\"params\":{\"_protocolFeeDestination\":\"new protocol fee destination address to set\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for,       or self address to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}},\"updateSharesSubject((address,uint256))\":{\"details\":\"This is a restricted access function which should be accessible only from the      MultiSig wallet controlling the protocol, so that its usage is not scalable\",\"params\":{\"_sharesSubject\":\"new subject to set\"}},\"updateSharesSubject((address,uint256),address)\":{\"details\":\"This is a restricted access function which should be accessible only from the      MultiSig wallet controlling the protocol, so that its usage is not scalable\",\"params\":{\"_factory\":\"shares factory contract to notify about the update, optional      if set to zero, the notification is not done\",\"_sharesSubject\":\"new subject to set\"}}},\"title\":\"ETH Shares\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_HOLDERS_FEE_MANAGER()\":{\"notice\":\"Holders fee [disable] manager can disable the shares holders fee functionality;      the manager cannot enable it back\"},\"ROLE_PROTOCOL_FEE_MANAGER()\":{\"notice\":\"Protocol fee destination manager is responsible for updating the address collecting the      protocol fee destination, that is `protocolFeeDestination`; the manager cannot update the fee percent\"},\"ROLE_SHARES_SUBJECT_MANAGER()\":{\"notice\":\"Shares subject manager is responsible for updating the \\\"shares subject\\\"      in case of emergency, for example if underlying NFT was stolen\"},\"ROLE_UPGRADE_MANAGER()\":{\"notice\":\"Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\"},\"buyShares(uint256)\":{\"notice\":\"Buy `amount` of shares. Sender has to supply `getBuyPriceAfterFee(amount)` ETH.      First share can be bought only by current subject issuer.\"},\"buySharesTo(uint256,address)\":{\"notice\":\"Buy `amount` of shares in the favor of the address specified (beneficiary).      Sender has to supply `getBuyPriceAfterFee(amount)` ETH.      First share can be bought only by current subject issuer.\"},\"disableHoldersFee()\":{\"notice\":\"Disables shares holders fee functionality; detaches shares contract from      the HoldersRewardsDistributor, stops sending fees, stops sending syncsIncreases the protocol fee by the value of the disabled shares holders fee,      so that the sum of all the fees remains the sameOnce disabled, the holders fee functionality cannot be enabled back\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"getBuyPrice(uint256)\":{\"notice\":\"Current price of the `amount` of shares to buy; calculated based on      the current total shares supply\"},\"getBuyPrice(uint256,uint256)\":{\"notice\":\"The price of the `amount` of shares to buy calculated based on      the specified total shares supply\"},\"getBuyPriceAfterFee(uint256)\":{\"notice\":\"Current price of the `amount` of shares to buy, including all fees;      calculated based on the current total shares supply and fees percentages\"},\"getBuyPriceAfterFee(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"The price of the `amount` of shares to buy, including all fees;      calculated based on the specified total shares supply and fees percentages\"},\"getHoldersFeeDestination()\":{\"notice\":\"Shares holders reward distributor contract attached to the shares contract      in order to receive its portion of the fees to be distributed among the shares holders\"},\"getHoldersFeeInfo()\":{\"notice\":\"Shares holders fee destination and shares holders fee percent as a tuple;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\"},\"getHoldersFeePercent()\":{\"notice\":\"Shares holders fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%Shares holders fee is sent to the holders fee destination (see `getHoldersFeeDestination`)\"},\"getPrice(uint256,uint256)\":{\"notice\":\"Bonding curve function definition. The function calculating the price      of the `amount` of shares given the current total supply `supply`\"},\"getProtocolFeeDestination()\":{\"notice\":\"Protocol fee destination, the address protocol fee is sent to\"},\"getProtocolFeeInfo()\":{\"notice\":\"Protocol fee destination and protocol fee percent as a tuple;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\"},\"getProtocolFeePercent()\":{\"notice\":\"Protocol fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%Protocol fee is sent to the protocol fee destination (see `getProtocolFeeDestination`)\"},\"getRole(address)\":{\"notice\":\"Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"},\"getSellPrice(uint256)\":{\"notice\":\"Current price of the `amount` of shares to sell; calculated based on      the current total shares supply\"},\"getSellPrice(uint256,uint256)\":{\"notice\":\"The price of the `amount` of shares to sell calculated based on      the specified total shares supply\"},\"getSellPriceAfterFee(uint256)\":{\"notice\":\"Current price of the `amount` of shares to sell, including all fees;      calculated based on the current total shares supply and fees percentages\"},\"getSellPriceAfterFee(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"The price of the `amount` of shares to sell, including all fees;      calculated based on the specified total shares supply and fees percentages\"},\"getSharesBalance(address)\":{\"notice\":\"Shares balance of the given holder; this function is similar to ERC20.balanceOf()\"},\"getSharesIssuer()\":{\"notice\":\"Shares issuer, the receiver of the shares fees\"},\"getSharesSubject()\":{\"notice\":\"Shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\"},\"getSharesSupply()\":{\"notice\":\"Total amount of the shares in existence, the sum of all individual shares balances;      this function is similar to ERC20.totalSupply()\"},\"getSubjectFeeInfo()\":{\"notice\":\"Subject fee destination and subject fee percent as a tuple;      subject fee destination is shares issuer address;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%;\"},\"getSubjectFeePercent()\":{\"notice\":\"Subject fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%Subject fee is sent to the subject fee issuer (see `getSharesIssuer`)\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"sellShares(uint256)\":{\"notice\":\"Sell `amount` of shares. Sender gets `getSellPriceAfterFee(amount)` of ETH.      Last share cannot be sold.\"},\"sellSharesTo(uint256,address)\":{\"notice\":\"Sell `amount` of shares in the favor of the address specified (beneficiary).      The beneficiary gets `getSellPriceAfterFee(amount)` of ETH.      Last share cannot be sold.\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateProtocolFeeDestination(address)\":{\"notice\":\"Updates the protocol fee destination address `protocolFeeDestination`\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"updateSharesSubject((address,uint256))\":{\"notice\":\"Updates the shares subject\"},\"updateSharesSubject((address,uint256),address)\":{\"notice\":\"Updates the shares subject and optionally notifies the factory about the update;      update fails if the factory notification fails\"}},\"notice\":\"TradeableShares implementation using native ETH for payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bonding_curves/ETHShares.sol\":\"ETHShares\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/bonding_curves/AbstractShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/InitializableAccessControl.sol\\\";\\nimport \\\"./TradeableShares.sol\\\";\\nimport \\\"./SharesFactory.sol\\\";\\nimport \\\"./SharesSubjectLib.sol\\\";\\nimport \\\"./FriendTechBondingCurve.sol\\\";\\n\\n/**\\n * @title Abstract Shares\\n *\\n * @notice Contains the logic which is currently common for the ETHShares\\n *      and ERC20Shares TradeableShares implementations.\\n *      Once these contracts diverge enough in their logic, this abstract contract\\n *      may cease to exist.\\n *\\n * @dev Based on the friend.tech FriendtechSharesV1.sol\\n */\\nabstract contract AbstractShares is TradeableShares, FriendTechBondingCurve, InitializableAccessControl {\\n\\t/// @dev Shares subject is an NFT; NFT owner receives the subject fee\\n\\tSharesSubject private sharesSubject;\\n\\t/// @dev Protocol fee destination is an address collecting the protocol fee\\n\\taddress private protocolFeeDestination;\\n\\t/// @dev Protocol fee percent, immutable; maximum value: 10^18 (< 2^60)\\n\\tuint64 private /*immutable*/ protocolFeePercent;\\n\\t/// @dev Holders rewards fee destination is a contract collecting the holders fee, immutable\\n\\tHoldersRewardsDistributor private /*immutable*/ holdersFeeDestination;\\n\\t/// @dev Holders rewards fee percent, immutable\\n\\tuint64 private /*immutable*/ holdersFeePercent;\\n\\t/// @dev Subject fee percent, immutable\\n\\tuint64 private /*immutable*/ subjectFeePercent;\\n\\n\\t/// @dev Total shares supply, sum of all the individual balances in `sharesBalances`\\n\\tuint256 internal sharesSupply;\\n\\t/// @dev Individual shares balances: Holder => Balance\\n\\tmapping(address => uint256) internal sharesBalances;\\n\\n\\t/**\\n\\t * @dev Fired in `updateSharesSubject`\\n\\t *\\n\\t * @param oldSubject old shares subject\\n\\t * @param newSubject new shares subject\\n\\t * @param factory the factory contract notified about the update\\n\\t */\\n\\tevent SharesSubjectUpdated(SharesSubject oldSubject, SharesSubject newSubject, SharesFactory factory);\\n\\n\\t/**\\n\\t * @dev Fired in `updateProtocolFeeDestination`\\n\\t *\\n\\t * @param oldProtocolFeeDestination old protocol fee destination\\n\\t * @param newProtocolFeeDestination new protocol fee destination\\n\\t */\\n\\tevent ProtocolFeeDestinationUpdated(address oldProtocolFeeDestination, address newProtocolFeeDestination);\\n\\n\\t/**\\n\\t * @dev Fire in `disableHoldersFee` no more than once\\n\\t *      for the entire lifespan of the contract\\n\\t *\\n\\t * @param oldProtocolFeePercent old protocol fee percent\\n\\t * @param newProtocolFeePercent new protocol fee percent, new >= old\\n\\t */\\n\\tevent HoldersFeeDisabled(uint256 oldProtocolFeePercent, uint256 newProtocolFeePercent);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination manager is responsible for updating the address collecting the\\n\\t *      protocol fee destination, that is `protocolFeeDestination`; the manager cannot update the fee percent\\n\\t *\\n\\t * @dev This role should be granted to the MultiSig, not to EOA and not to\\n\\t *      RBAC managed smart contract, so that this functionality is not scalable;\\n\\t *      this reduces the risk of misuse, and/or malicious use\\n\\t *\\n\\t * @dev Role ROLE_PROTOCOL_FEE_MANAGER is required to execute `updateProtocolFeeDestination` function\\n\\t */\\n\\tuint32 public constant ROLE_PROTOCOL_FEE_MANAGER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Holders fee [disable] manager can disable the shares holders fee functionality;\\n\\t *      the manager cannot enable it back\\n\\t *\\n\\t * @dev This role should be granted to the MultiSig, not to EOA and not to\\n\\t *      RBAC managed smart contract, so that this functionality is not scalable;\\n\\t *      this reduces the risk of misuse, and/or malicious use\\n\\t *\\n\\t * @dev Role ROLE_HOLDERS_FEE_MANAGER is required to execute `disableHoldersFee` function\\n\\t */\\n\\tuint32 public constant ROLE_HOLDERS_FEE_MANAGER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice Shares subject manager is responsible for updating the \\\"shares subject\\\"\\n\\t *      in case of emergency, for example if underlying NFT was stolen\\n\\t *\\n\\t * @dev This role should be granted to the MultiSig, not to EOA and not to\\n\\t *      RBAC managed smart contract, so that this functionality is not scalable;\\n\\t *      this reduces the risk of misuse, and/or malicious use\\n\\t *\\n\\t * @dev Role ROLE_SHARES_SUBJECT_MANAGER is required to execute `updateSharesSubject` function\\n\\t */\\n\\tuint32 public constant ROLE_SHARES_SUBJECT_MANAGER = 0x0008_0000;\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for initializable, must be execute during or immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * @param _owner the address receiving all the RBAC permissions on the contract\\n\\t * @param _sharesSubject shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\\n\\t * @param _protocolFeeDestination protocol fee destination, the address protocol fee is sent to\\n\\t * @param _protocolFeePercent protocol fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _holdersFeeDestination shares holders fee destination, the HoldersRewardsDistributor contract\\n\\t *      the shares holders fee is sent to\\n\\t * @param _holdersFeePercent shares holders fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _subjectFeePercent subject fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t */\\n\\tfunction _postConstruct(\\n\\t\\taddress _owner,\\n\\t\\tSharesSubject memory _sharesSubject,\\n\\t\\taddress _protocolFeeDestination,\\n\\t\\tuint64 _protocolFeePercent,\\n\\t\\tHoldersRewardsDistributor _holdersFeeDestination,\\n\\t\\tuint64 _holdersFeePercent,\\n\\t\\tuint64 _subjectFeePercent\\n\\t) internal onlyInitializing {\\n\\t\\t// execute parent initializer\\n\\t\\t_postConstruct(_owner);\\n\\t\\t// this initializer is called only from the factory, we do not verify the\\n\\t\\t// validity of the inputs generated by the factory itself\\n\\t\\t// if the factory goes buggy/malicious after the upgrade, all the\\n\\t\\t// shares contracts deployed after should be considered invalid\\n\\t\\tsharesSubject = _sharesSubject;\\n\\t\\tprotocolFeeDestination = _protocolFeeDestination;\\n\\t\\tprotocolFeePercent = _protocolFeePercent;\\n\\t\\tholdersFeeDestination = _holdersFeeDestination;\\n\\t\\tholdersFeePercent = _holdersFeePercent;\\n\\t\\tsubjectFeePercent = _subjectFeePercent;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSharesSubject() public view returns(SharesSubject memory) {\\n\\t\\t// read value from the storage\\n\\t\\treturn sharesSubject;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the shares subject\\n\\t *\\n\\t * @dev This is a restricted access function which should be accessible only from the\\n\\t *      MultiSig wallet controlling the protocol, so that its usage is not scalable\\n\\t *\\n\\t * @param _sharesSubject new subject to set\\n\\t */\\n\\tfunction updateSharesSubject(SharesSubject calldata _sharesSubject) public {\\n\\t\\t// delegate to `updateSharesSubject` with the zero factory\\n\\t\\tupdateSharesSubject(_sharesSubject, SharesFactory(address(0)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the shares subject and optionally notifies the factory about the update;\\n\\t *      update fails if the factory notification fails\\n\\t *\\n\\t * @dev This is a restricted access function which should be accessible only from the\\n\\t *      MultiSig wallet controlling the protocol, so that its usage is not scalable\\n\\t *\\n\\t * @param _sharesSubject new subject to set\\n\\t * @param _factory shares factory contract to notify about the update, optional\\n\\t *      if set to zero, the notification is not done\\n\\t */\\n\\tfunction updateSharesSubject(SharesSubject calldata _sharesSubject, SharesFactory _factory) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_SHARES_SUBJECT_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit SharesSubjectUpdated(sharesSubject, _sharesSubject, _factory);\\n\\n\\t\\t// update contract's state\\n\\t\\tsharesSubject = _sharesSubject;\\n\\n\\t\\t// if factory is set (factory notification requested)\\n\\t\\tif(address(_factory) != address(0)) {\\n\\t\\t\\t// notify factory contract\\n\\t\\t\\t_factory.notifySubjectUpdated();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getProtocolFeeDestination() public view returns(address) {\\n\\t\\t// read the value from storage\\n\\t\\treturn protocolFeeDestination;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the protocol fee destination address `protocolFeeDestination`\\n\\t *\\n\\t * @dev This is a restricted access function which should be accessible only from the\\n\\t *      MultiSig wallet controlling the protocol, so that its usage is not scalable\\n\\t *\\n\\t * @param _protocolFeeDestination new protocol fee destination address to set\\n\\t */\\n\\tfunction updateProtocolFeeDestination(address _protocolFeeDestination) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_PROTOCOL_FEE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit ProtocolFeeDestinationUpdated(protocolFeeDestination, _protocolFeeDestination);\\n\\n\\t\\t// update contract's state\\n\\t\\tprotocolFeeDestination = _protocolFeeDestination;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getProtocolFeePercent() public view returns(uint256) {\\n\\t\\t// read the value from storage (immutable)\\n\\t\\treturn protocolFeePercent;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getProtocolFeeInfo() public view returns(address feeDestination, uint256 feePercent) {\\n\\t\\t// read fee destination first\\n\\t\\tfeeDestination = getProtocolFeeDestination();\\n\\t\\t// if it's zero, zero down the fee as well\\n\\t\\tfeePercent = feeDestination == address(0)? 0: getProtocolFeePercent();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getHoldersFeeDestination() public view returns(HoldersRewardsDistributor) {\\n\\t\\t// read the value from storage (immutable)\\n\\t\\treturn holdersFeeDestination;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Disables shares holders fee functionality; detaches shares contract from\\n\\t *      the HoldersRewardsDistributor, stops sending fees, stops sending syncs\\n\\t *\\n\\t * @notice Increases the protocol fee by the value of the disabled shares holders fee,\\n\\t *      so that the sum of all the fees remains the same\\n\\t *\\n\\t * @notice Once disabled, the holders fee functionality cannot be enabled back\\n\\t */\\n\\tfunction disableHoldersFee() public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_HOLDERS_FEE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// verify the holders functionality is enabled\\n\\t\\trequire(address(holdersFeeDestination) != address(0) || holdersFeePercent != 0, \\\"not enabled\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit HoldersFeeDisabled(protocolFeePercent, protocolFeePercent + holdersFeePercent);\\n\\n\\t\\t// shares holders fee goes to the protocol from now on\\n\\t\\tprotocolFeePercent += holdersFeePercent;\\n\\n\\t\\t// zero the shares holders fee\\n\\t\\tholdersFeeDestination = HoldersRewardsDistributor(address(0));\\n\\t\\tholdersFeePercent = 0;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getHoldersFeePercent() public view returns(uint256) {\\n\\t\\t// read the value from storage (immutable)\\n\\t\\treturn holdersFeePercent;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getHoldersFeeInfo() public view returns(HoldersRewardsDistributor feeDestination, uint256 feePercent) {\\n\\t\\t// read fee destination first\\n\\t\\tfeeDestination = getHoldersFeeDestination();\\n\\t\\t// if it's zero, zero down the fee as well\\n\\t\\tfeePercent = address(feeDestination) == address(0)? 0: getHoldersFeePercent();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSubjectFeeInfo() public view returns(address feeDestination, uint256 feePercent) {\\n\\t\\t// read fee destination first\\n\\t\\tfeeDestination = getSharesIssuer();\\n\\t\\t// if it's zero, zero down the fee as well\\n\\t\\tfeePercent = feeDestination == address(0)? 0: getSubjectFeePercent();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSubjectFeePercent() public view returns(uint256) {\\n\\t\\t// read the value from storage (immutable)\\n\\t\\treturn subjectFeePercent;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSharesIssuer() public view returns(address nftOwner) {\\n\\t\\t// derive the NFT owner defined by the subject\\n\\t\\treturn SharesSubjectLib.getSharesIssuer(sharesSubject);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSharesBalance(address _holder) public view returns(uint256 balance) {\\n\\t\\t// read the value from storage\\n\\t\\treturn sharesBalances[_holder];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSharesSupply() public view returns(uint256 supply) {\\n\\t\\t// read the value from storage\\n\\t\\treturn sharesSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getBuyPrice(uint256 _supply, uint256 _amount) public pure returns(uint256) {\\n\\t\\t// this is the original friend tech formula\\n\\t\\treturn getPrice(_supply, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSellPrice(uint256 _supply, uint256 _amount) public pure returns(uint256) {\\n\\t\\t// this is the original friend tech formula\\n\\t\\treturn getPrice(_supply - _amount, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getBuyPriceAfterFee(\\n\\t\\tuint256 _supply,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _protocolFeePercent,\\n\\t\\tuint256 _holdersFeePercent,\\n\\t\\tuint256 _subjectFeePercent\\n\\t) public pure returns(uint256) {\\n\\t\\t// this is the original friend tech formula\\n\\t\\tuint256 price = getBuyPrice(_supply, _amount);\\n\\t\\tuint256 protocolFee = price * _protocolFeePercent / 1 ether;\\n\\t\\tuint256 holdersFee = price * _holdersFeePercent / 1 ether;\\n\\t\\tuint256 subjectFee = price * _subjectFeePercent / 1 ether;\\n\\t\\treturn price + protocolFee + holdersFee + subjectFee;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSellPriceAfterFee(\\n\\t\\tuint256 _supply,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _protocolFeePercent,\\n\\t\\tuint256 _holdersFeePercent,\\n\\t\\tuint256 _subjectFeePercent\\n\\t) public pure returns(uint256) {\\n\\t\\t// this is the original friend tech formula\\n\\t\\tuint256 price = getSellPrice(_supply, _amount);\\n\\t\\tuint256 protocolFee = price * _protocolFeePercent / 1 ether;\\n\\t\\tuint256 holdersFee = price * _holdersFeePercent / 1 ether;\\n\\t\\tuint256 subjectFee = price * _subjectFeePercent / 1 ether;\\n\\t\\treturn price - protocolFee - holdersFee - subjectFee;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getBuyPrice(uint256 _amount) public view returns(uint256) {\\n\\t\\t// delegate to `getBuyPrice`\\n\\t\\treturn getBuyPrice(getSharesSupply(), _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSellPrice(uint256 _amount) public view returns(uint256) {\\n\\t\\t// delegate to `getSellPrice`\\n\\t\\treturn getSellPrice(getSharesSupply(), _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getBuyPriceAfterFee(uint256 _amount) public view returns(uint256) {\\n\\t\\t// read the effective fees values\\n\\t\\t(, uint256 _protocolFeePercent) = getProtocolFeeInfo();\\n\\t\\t(, uint256 _holdersFeePercent) = getHoldersFeeInfo();\\n\\t\\t(, uint256 _subjectFeePercent) = getSubjectFeeInfo();\\n\\n\\t\\t// delegate to `getBuyPriceAfterFee`\\n\\t\\treturn getBuyPriceAfterFee(getSharesSupply(), _amount, _protocolFeePercent, _holdersFeePercent, _subjectFeePercent);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction getSellPriceAfterFee(uint256 _amount) public view returns(uint256) {\\n\\t\\t// read the effective fees values\\n\\t\\t(, uint256 _protocolFeePercent) = getProtocolFeeInfo();\\n\\t\\t(, uint256 _holdersFeePercent) = getHoldersFeeInfo();\\n\\t\\t(, uint256 _subjectFeePercent) = getSubjectFeeInfo();\\n\\n\\t\\t// delegate to `getSellPriceAfterFee`\\n\\t\\treturn getSellPriceAfterFee(getSharesSupply(), _amount, _protocolFeePercent, _holdersFeePercent, _subjectFeePercent);\\n\\t}\\n}\\n\",\"keccak256\":\"0xaf263133b99a54905d4c857200cf9ae0e3731fadfa6d9d3db85706b890fcad8f\",\"license\":\"MIT\"},\"contracts/bonding_curves/BondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Bonding Curve\\n *\\n * @notice A friend.tech-like bonding curve definition\\n *\\n * @notice Bonding curve defines the price of the smallest unit of the asset as a function\\n *      of the asset supply\\n */\\ninterface BondingCurve {\\n\\t/**\\n\\t * @notice Bonding curve function definition. The function calculating the price\\n\\t *      of the `amount` of shares given the current total supply `supply`\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to buy/sell\\n\\t * @return the price of the shares (all `amount` amount)\\n\\t */\\n\\tfunction getPrice(uint256 supply, uint256 amount) external pure returns(uint256);\\n}\\n\",\"keccak256\":\"0x5c8602275460cf842e4804ce37f8b847857b32414cd535736857bced13c2cbe2\",\"license\":\"MIT\"},\"contracts/bonding_curves/ETHShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/Transfers.sol\\\";\\nimport \\\"./AbstractShares.sol\\\";\\n\\n/**\\n * @title ETH Shares\\n *\\n * @notice TradeableShares implementation using native ETH for payments\\n *\\n * @dev Based on the friend.tech FriendtechSharesV1.sol\\n */\\ncontract ETHShares is AbstractShares {\\n\\t/// @dev Overrides standard send and transfer Solidity functions\\n\\tusing Transfers for address payable;\\n\\n\\t/**\\n\\t * @dev Deploys the ETHShares instance and initializes it\\n\\t *\\n\\t * @param _owner the address receiving all the RBAC permissions on the contract\\n\\t * @param _sharesSubject shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\\n\\t * @param _protocolFeeDestination protocol fee destination, the address protocol fee is sent to\\n\\t * @param _protocolFeePercent protocol fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _holdersFeeDestination shares holders fee destination, the HoldersRewardsDistributor contract\\n\\t *      the shares holders fee is sent to\\n\\t * @param _holdersFeePercent shares holders fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _subjectFeePercent subject fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _amount how many shares to buy immediately upon \\\"post-construction\\\", can be zero\\n\\t * @param _beneficiary the address receiving the shares bought immediately (must be set\\n\\t *      if `_amount` is not zero)\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tSharesSubject memory _sharesSubject,\\n\\t\\taddress _protocolFeeDestination,\\n\\t\\tuint64 _protocolFeePercent,\\n\\t\\tHoldersRewardsDistributor _holdersFeeDestination,\\n\\t\\tuint64 _holdersFeePercent,\\n\\t\\tuint64 _subjectFeePercent,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _beneficiary\\n\\t) payable initializer {\\n\\t\\t// initialize the deployed instance\\n\\t\\tpostConstruct(\\n\\t\\t\\t_owner,\\n\\t\\t\\t_sharesSubject,\\n\\t\\t\\t_protocolFeeDestination,\\n\\t\\t\\t_protocolFeePercent,\\n\\t\\t\\t_holdersFeeDestination,\\n\\t\\t\\t_holdersFeePercent,\\n\\t\\t\\t_subjectFeePercent,\\n\\t\\t\\t_amount,\\n\\t\\t\\t_beneficiary\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for initializable, must be execute during or immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * @param _owner the address receiving all the RBAC permissions on the contract\\n\\t * @param _sharesSubject shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\\n\\t * @param _protocolFeeDestination protocol fee destination, the address protocol fee is sent to\\n\\t * @param _protocolFeePercent protocol fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _holdersFeeDestination shares holders fee destination, the HoldersRewardsDistributor contract\\n\\t *      the shares holders fee is sent to\\n\\t * @param _holdersFeePercent shares holders fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _subjectFeePercent subject fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t * @param _amount how many shares to buy immediately upon \\\"post-construction\\\", can be zero\\n\\t * @param _beneficiary the address receiving the shares bought immediately (must be set\\n\\t *      if `_amount` is not zero)\\n\\t */\\n\\tfunction postConstruct(\\n\\t\\taddress _owner,\\n\\t\\tSharesSubject memory _sharesSubject,\\n\\t\\taddress _protocolFeeDestination,\\n\\t\\tuint64 _protocolFeePercent,\\n\\t\\tHoldersRewardsDistributor _holdersFeeDestination,\\n\\t\\tuint64 _holdersFeePercent,\\n\\t\\tuint64 _subjectFeePercent,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _beneficiary\\n\\t) public payable initializer {\\n\\t\\t// execute parent initializer\\n\\t\\t_postConstruct(\\n\\t\\t\\t_owner,\\n\\t\\t\\t_sharesSubject,\\n\\t\\t\\t_protocolFeeDestination,\\n\\t\\t\\t_protocolFeePercent,\\n\\t\\t\\t_holdersFeeDestination,\\n\\t\\t\\t_holdersFeePercent,\\n\\t\\t\\t_subjectFeePercent\\n\\t\\t);\\n\\n\\t\\t// buy shares if requested\\n\\t\\tif(_amount != 0) {\\n\\t\\t\\t__buySharesTo(_amount, _beneficiary);\\n\\t\\t}\\n\\t\\t// otherwise if transaction contains a payment\\n\\t\\telse if(msg.value > 0) {\\n\\t\\t\\t//  don't forget to return it back\\n\\t\\t\\tpayable(msg.sender).transfer1(msg.value);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction buyShares(uint256 amount) public payable {\\n\\t\\t// delegate to `buySharesTo`\\n\\t\\tbuySharesTo(amount, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction sellShares(uint256 amount) public {\\n\\t\\t// delegate to `sellSharesTo`\\n\\t\\tsellSharesTo(amount, payable(msg.sender));\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction buySharesTo(uint256 amount, address beneficiary) public payable {\\n\\t\\t// verify the first share is not bought\\n\\t\\trequire(getSharesSupply() > 0 || getSharesIssuer() == msg.sender, \\\"only the issuer can buy the first share\\\");\\n\\n\\t\\t// delegate to unsafe `__buySharesTo`\\n\\t\\t__buySharesTo(amount, beneficiary);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Buys amount of shares for the beneficiary, without checking if the first share was bought\\n\\t *\\n\\t * @param amount amount of the shares to buy\\n\\t * @param beneficiary an address receiving the shares\\n\\t */\\n\\tfunction __buySharesTo(uint256 amount, address beneficiary) private {\\n\\t\\t// cache the supply value\\n\\t\\tuint256 supply = getSharesSupply();\\n\\n\\t\\t// update the balances (note: security checks are below)\\n\\t\\tsharesBalances[beneficiary] += amount;\\n\\t\\tsharesSupply = supply + amount;\\n\\n\\t\\t// determine the price and process the fees\\n\\t\\tuint256 price = getPrice(supply, amount);\\n\\t\\t(, , uint256 protocolFee) = __processProtocolFee(price);\\n\\t\\t(, , uint256 holdersFee) = __processHoldersFeeAndNotify(price, true, amount, beneficiary);\\n\\t\\t(address issuer, , uint256 subjectFee) = __processSubjectFee(price);\\n\\n\\t\\t// verify the transaction has enough Ether supplied\\n\\t\\tuint256 value = price + protocolFee + holdersFee + subjectFee;\\n\\t\\trequire(msg.value >= value, \\\"insufficient value supplied\\\");\\n\\n\\t\\t// return the change back to the buyer; here we do fail on error\\n\\t\\t// note: if any of the fees failed to transfer, they are sent to the buyer\\n\\t\\tif(msg.value > value) {\\n\\t\\t\\tpayable(msg.sender).transfer1(msg.value - value);\\n\\t\\t}\\n\\n\\t\\t// emit an event\\n\\t\\temit Trade(beneficiary, issuer, true, amount, price, protocolFee, holdersFee, subjectFee, sharesSupply);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc TradeableShares\\n\\t */\\n\\tfunction sellSharesTo(uint256 amount, address payable beneficiary) public {\\n\\t\\t// verify the amount vs total supply\\n\\t\\tuint256 supply = getSharesSupply();\\n\\t\\trequire(supply > amount, \\\"cannot sell the last share\\\");\\n\\n\\t\\t// verify the amount vs seller's balance\\n\\t\\tuint256 balance = getSharesBalance(msg.sender);\\n\\t\\trequire(balance >= amount, \\\"insufficient shares\\\");\\n\\n\\t\\t// update the balances\\n\\t\\tsharesBalances[msg.sender] = balance - amount;\\n\\t\\tsharesSupply = supply - amount;\\n\\n\\t\\t// determine the price and process the fees\\n\\t\\tuint256 price = getPrice(supply - amount, amount);\\n\\t\\t(, , uint256 protocolFee) = __processProtocolFee(price);\\n\\t\\t(, , uint256 holdersFee) = __processHoldersFeeAndNotify(price, false, amount, msg.sender);\\n\\t\\t(address issuer, , uint256 subjectFee) = __processSubjectFee(price);\\n\\n\\t\\t// price cannot be zero since the last share cannot be sold\\n\\t\\t// if the price transfer fails, we do fail\\n\\t\\t// note: if any of the fees failed to transfer, they are sent to the seller\\n\\t\\tbeneficiary.transfer1(price - protocolFee - holdersFee - subjectFee);\\n\\n\\t\\t// emit an event\\n\\t\\temit Trade(beneficiary, issuer, false, amount, price, protocolFee, holdersFee, subjectFee, sharesSupply);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the protocol fee and sends it to the protocol fee destination\\n\\t *\\n\\t * @param price already calculated price of the trade\\n\\t */\\n\\tfunction __processProtocolFee(uint256 price) private returns(\\n\\t\\taddress protocolFeeDestination,\\n\\t\\tuint256 protocolFeePercent,\\n\\t\\tuint256 protocolFee\\n\\t) {\\n\\t\\t// read fee information in a consistent way\\n\\t\\t(protocolFeeDestination, protocolFeePercent) = getProtocolFeeInfo();\\n\\n\\t\\t// calculate the fee\\n\\t\\tprotocolFee = price * protocolFeePercent / 1 ether;\\n\\n\\t\\t// do the required ETH payment transfer\\n\\t\\t// if the fee payment fails - do not throw and update the fee to zero\\n\\t\\tif(protocolFee != 0 && !payable(protocolFeeDestination).send1(protocolFee)) {\\n\\t\\t\\t// protocol fee couldn't be sent or is zero\\n\\t\\t\\tprotocolFee = 0;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the shares holders fee and sends it to the holders fee destination;\\n\\t *      notifies the destination (which is a HoldersRewardsDistributor contract) about\\n\\t *      the trade, submits trader address, and trade amount\\n\\t *\\n\\t * @dev isBuy is true if the shares are bought\\n\\t *      isBuy is false if the shares are sold\\n\\t *\\n\\t * @param price already calculated price of the trade\\n\\t * @param isBuy operation type, [true] buying, [false] selling\\n\\t * @param amount trade amount\\n\\t * @param trader an account which makes a trade, whose shares balance changes by the `amount`\\n\\t */\\n\\tfunction __processHoldersFeeAndNotify(uint256 price, bool isBuy, uint256 amount, address trader) private returns(\\n\\t\\tHoldersRewardsDistributor holdersFeeDestination,\\n\\t\\tuint256 holdersFeePercent,\\n\\t\\tuint256 holdersFee\\n\\t) {\\n\\t\\t// read fee information in a consistent way\\n\\t\\t(holdersFeeDestination, holdersFeePercent) = getHoldersFeeInfo();\\n\\n\\t\\t// calculate the fee\\n\\t\\tholdersFee = price * holdersFeePercent / 1 ether;\\n\\n\\t\\t// do the required ETH payment transfer and HoldersRewardsDistributor sync\\n\\t\\tif(address(holdersFeeDestination) != address(0) && amount != 0) {\\n\\t\\t\\t// construct the HoldersRewardsDistributor sync message\\n\\t\\t\\tbytes memory syncMessage = abi.encode(trader, isBuy, amount);\\n\\n\\t\\t\\t// send the fee together with the sync message\\n\\t\\t\\t// we pass all the gas available since the fee destination address is trusted,\\n\\t\\t\\t// and since if the call fails we also fail the entire transaction\\n\\t\\t\\t(bool success, ) = address(holdersFeeDestination).call{value: holdersFee}(syncMessage);\\n\\n\\t\\t\\t// we require synchronization to succeed, otherwise we can't guarantee data consistency\\n\\t\\t\\t// on the HoldersRewardsDistributor contract's side\\n\\t\\t\\trequire(success, \\\"sync failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the subject fee and sends it to the issuer\\n\\t *\\n\\t * @param price already calculated price of the trade\\n\\t */\\n\\tfunction __processSubjectFee(uint256 price) private returns(\\n\\t\\taddress subjectFeeDestination,\\n\\t\\tuint256 subjectFeePercent,\\n\\t\\tuint256 subjectFee\\n\\t) {\\n\\t\\t// read fee information in a consistent way\\n\\t\\t(subjectFeeDestination, subjectFeePercent) = getSubjectFeeInfo();\\n\\n\\t\\t// calculate the fee\\n\\t\\tsubjectFee = price * subjectFeePercent / 1 ether;\\n\\n\\t\\t// do the required ETH payment transfer\\n\\t\\t// if the fee payment fails - do not throw and update the fee to zero\\n\\t\\tif(subjectFee != 0 && !payable(subjectFeeDestination).send1(subjectFee)) {\\n\\t\\t\\t// protocol fee couldn't be sent or is zero\\n\\t\\t\\tsubjectFee = 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2406f5323d39e310c91991bcc8416ae8938eabbb8edc3f34873e03aff930fe9f\",\"license\":\"MIT\"},\"contracts/bonding_curves/FriendTechBondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BondingCurve.sol\\\";\\n\\n/**\\n * @title FriendTech Bonding Curve\\n *\\n * @notice friend.tech definition of the bonding curve function\\n */\\ncontract FriendTechBondingCurve is BondingCurve {\\n\\t/**\\n\\t * @inheritdoc BondingCurve\\n\\t *\\n\\t * @param s supply, total shares supply\\n\\t * @param a amount, number of shares to buy/sell\\n\\t */\\n\\tfunction getPrice(uint256 s, uint256 a) public pure returns(uint256) {\\n\\t\\t// this is the original friend tech formula with the underflow fix\\n\\t\\t// the fix allows both supply and amount be zero, as well as\\n\\t\\t// it allows supply be zero when the amount is bigger than one\\n\\t\\tuint256 sum1 = s == 0 ? 0 : (s - 1) * s * (2 * (s - 1) + 1) / 6;\\n\\t\\tuint256 sum2 = s == 0 && a <= 1 ? 0 : (s + a - 1) * (s + a) * (2 * (s + a - 1) + 1) / 6;\\n\\t\\tuint256 summation = sum2 - sum1;\\n\\t\\treturn summation * 1 ether / 16000;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1084fa21e0a56882a5fa96664f6df1bf076fd15cc2f3fa7c600244cdad331d9c\",\"license\":\"MIT\"},\"contracts/bonding_curves/HoldersRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC1363Spec.sol\\\";\\n\\n/**\\n * @title Bonding Curve Holders Rewards Distributor\\n *\\n * @notice Holders rewards distributor keeps track of every trade event happening in the curve,\\n *      and based on the amount of shares the holder has, alters the holders' reward weight,\\n *      which directly affects the amount of the distributed rewards between the holders\\n *\\n * @notice Holders rewards distributor accepts the fees from the curve and distributes these fees\\n *      across shares holders proportionally to their weights\\n *\\n * @dev Apart from the `accept(uint256,address)` function designed to accept the fees from the\\n *      curve contract, the implementation must implement receive(), fallback(), and onTransferReceived()\\n *      functions to accept direct payments in both ETH and/or ERC20 payment token\\n *\\n * @dev receive() and onTransferReceived() with an empty data field must accept the fee in the same way\\n *      as an accept() function would do, but in a passive way (without ERC20 transfer)\\n *\\n * @dev The fallback() and onTransferReceived() with non-empty data field must accept the fee and the trading event;\\n *      trading event encoded in the bytes data field contains the information\\n *      on the trade which resulted in the fee being sent:\\n *\\n *      - address trader - shares holder/trader\\n *      - int256 sharesAmount - amount of shares [positive] bought or [negative] sold\\n *\\n *      the values above are packed as\\n *            data = abi.encode(trader, sharesAmount)\\n *      and can be unpacked as\\n *            (trader, sharesAmount) = abi.decode(data, (address, int256))\\n *            isBuy = sharesAmount > 0\\n *\\n *      if specified, the data field must be parsed by the implementation and its containing data applied;\\n *      standard logic applies, if the data is malformed implementation should throw\\n *\\n */\\ninterface HoldersRewardsDistributor is ERC1363Receiver {\\n\\t/**\\n\\t * @dev Fired in `sharesBought` and `sharesSold`\\n\\t *\\n\\t * @param trader is a buyer or a seller, depending on the operation type\\n\\t * @param isBuy true if the event comes from the `sharesBought` and represents the buy operation,\\n\\t *      false if the event comes from the `sharesSold` and represents the sell operation\\n\\t * @param sharesAmount amount of the shares bought or sold (see `isBuy`)\\n\\t */\\n\\tevent SharesTraded(address indexed trader, bool indexed isBuy, uint256 sharesAmount);\\n\\n\\t/**\\n\\t * @dev Fired when the fee for the distribution is received\\n\\t *\\n\\t * @param feeAmount amount of the fee to distribute between the holders\\n\\t */\\n\\tevent FeeReceived(uint256 feeAmount);\\n\\n\\t/**\\n\\t * @dev Fired in `claimReward`\\n\\t *\\n\\t * @param holder address of the trader (and shares holder) who received the reward\\n\\t * @param rewardAmount amount of the reward sent\\n\\t */\\n\\tevent RewardClaimed(address indexed holder, uint256 rewardAmount);\\n\\n\\t/**\\n\\t * @notice ERC20 payment token distributor is bound to\\n\\t *\\n\\t * @return paymentToken ERC20 payment token address the contract is bound to,\\n\\t *      or zero zero address if it operates with the plain ETH\\n\\t */\\n\\tfunction getPaymentToken() external view returns(address paymentToken);\\n\\n/*\\n\\t*/\\n/**\\n\\t * @notice Notifies the distributor about the trade event\\n\\t *\\n\\t * @dev Trade amount specified affects holder's (buyer's) weight when calculating the reward\\n\\t *\\n\\t * @param buyer shares buyer (becomes shares holder if not yet), a.k.a trader\\n\\t * @param amountBought amount of the shares bought\\n\\t *//*\\n\\n\\tfunction sharesBought(address buyer, uint256 amountBought) external;\\n\\n\\t*/\\n/**\\n\\t * @notice Notifies the distributor about the trade event\\n\\t *\\n\\t * @dev Trade amount specified affects holder's (seller's) weight when calculating the reward\\n\\t *\\n\\t * @param seller shares seller (shares holder), a.k.a trader\\n\\t * @param amountSold amount of the shares sold\\n\\t *//*\\n\\n\\tfunction sharesSold(address seller, uint256 amountSold) external;\\n\\n\\t*/\\n/**\\n\\t * @notice Executed by the fee sender to send the fee; in case of the ERC20 payment,\\n\\t *      this is the ask to take the specified amount of the ERC20 token of the specified type;\\n\\t *      in case of the ETH payment, the amount must be supplied with the transaction itself\\n\\t *\\n\\t * @dev When paying with an ERC20 payment token, sender must approve the contract for\\n\\t *      at least the amount specified before executing this function\\n\\t *\\n\\t * @dev Updates the accumulated reward per share\\n\\t *\\n\\t * @param feeAmount amount of the fee sent,\\n\\t *      in the case of ETH payment must be equal to msg.value\\n\\t *//*\\n\\n\\tfunction accept(uint256 feeAmount) external payable;\\n*/\\n\\n\\t/**\\n\\t * @notice Executed by the holder to claim entire pending reward\\n\\t *\\n\\t * @dev Holder can verify pending reward amount with the `pendingReward` function\\n\\t */\\n\\t// TODO: do we want to specify where to send the reward?\\n\\tfunction claimTheReward() external;\\n\\n\\t/**\\n\\t * @notice Pending (claimable) reward. This is the amount which can be claimed using `claimTheReward`\\n\\t *\\n\\t * @param holder the holder address to query the reward for\\n\\t * @return rewardAmount pending reward amount\\\\\\n\\t */\\n\\tfunction pendingReward(address holder) external view returns(uint256 rewardAmount);\\n}\\n\",\"keccak256\":\"0x4e03e385464a59e9a7eb08ae40cad90a40b3f8b826df4af0d7f80a40b6e11352\",\"license\":\"MIT\"},\"contracts/bonding_curves/SharesFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TradeableShares.sol\\\";\\n\\n/**\\n * @title Shares Factory\\n *\\n * @notice Creates/deploys TradeableShares contracts\\n *\\n * @notice The factory manages protocol fees of the deployed TradeableShares contract:\\n *      deployed contracts usually follow the protocol fees set on the factory\\n *\\n * @dev Based on the friend.tech FriendtechSharesV1.sol\\n */\\ninterface SharesFactory {\\n\\t/**\\n\\t * @dev Enum of all possible TradeableShares implementations the factory can deploy\\n\\t */\\n\\tenum ImplementationType {\\n\\t\\t/// @dev ETHShares implementation\\n\\t\\tETH,\\n\\t\\t/// @dev ERC20Shares implementation bound to the ERC20 payment token\\n\\t\\tERC20\\n\\t}\\n\\n\\t/**\\n\\t * @dev Shares deployment request is used to enable the TradeableShares\\n\\t *      deployment with meta-transactions\\n\\t * @dev See `executeDeploymentRequest()`\\n\\t */\\n\\tstruct SharesDeploymentRequest {\\n\\t\\t/// @dev TradeableShares implementation type\\n\\t\\tImplementationType implementationType;\\n\\t\\t/// @dev shares subject, owner of the curve\\n\\t\\tTradeableShares.SharesSubject sharesSubject;\\n\\t\\t/// @dev an address to mint the NFT defined by the subject if it doesn't exist\\n\\t\\taddress issuer;\\n\\t\\t/// @dev how many shares to buy immediately after the deployment\\n\\t\\tuint256 amount;\\n\\t\\t/// @dev unix timestamp when the request becomes valid\\n\\t\\tuint256 validFromTimestamp;\\n\\t\\t/// @dev unix timestamp when the request expires (becomes invalid)\\n\\t\\tuint256 expiresAtTimestamp;\\n\\t\\t/// @dev nonce of the request (sequential number, increased by one)\\n\\t\\tuint256 nonce;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fired in\\n\\t *      `setProtocolFeeDestination`\\n\\t *      `setProtocolFeePercent`\\n\\t *      `setHoldersFeePercent`\\n\\t *      `setSubjectFeePercent`\\n\\t *      `setProtocolFee`\\n\\t *\\n\\t * @param protocolFeeDestination address where the protocol fee is sent\\n\\t * @param protocolFeePercent protocol fee percent, value 10^18 corresponds to 100%\\n\\t * @param holdersFeePercent shares holders fee percent, value 10^18 corresponds to 100%\\n\\t * @param subjectFeePercent subject fee percent, value 10^18 corresponds to 100%\\n\\t */\\n\\tevent ProtocolFeeUpdated(\\n\\t\\taddress protocolFeeDestination,\\n\\t\\tuint64 protocolFeePercent,\\n\\t\\tuint64 holdersFeePercent,\\n\\t\\tuint64 subjectFeePercent\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in `deploySharesContract` and `registerSharesContract`\\n\\t *\\n\\t * @param creator shares creator, a.k.a. shares issuer, or current owner\\n\\t * @param implementationContract newly deployed or registered TradeableShares contract\\n\\t * @param holdersRewardsDistributor the shares holders fee destination, HoldersRewardsDistributor contract,\\n\\t *      this can be zero if shares contract is deployed without the shares holders fee distribution\\n\\t * @param implementationType type of the TradeableShares, see ImplementationType\\n\\t * @param sharesSubject current shares subject\\n\\t * @param newDeployment true if the factory deployed this TradeableShares contract,\\n\\t *      false if TradeableShares contract was already deployed and factory just registered it\\n\\t */\\n\\tevent SharesContractRegistered(\\n\\t\\taddress indexed creator,\\n\\t\\tTradeableShares indexed implementationContract,\\n\\t\\tHoldersRewardsDistributor indexed holdersRewardsDistributor,\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject sharesSubject,\\n\\t\\tbool newDeployment\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in `executeDeploymentRequest` and in `rewind`\\n\\t */\\n\\tevent NonceUsed(address indexed issuer, uint256 nonce);\\n\\n\\t/**\\n\\t * @notice Address of the already deployed TradeableShares implementation\\n\\t *      to be used by the factory to deploy the TradeableShares contracts EIP-1167 clones\\n\\t *\\n\\t * @param _implementationType TradeableShares implementation type\\n\\t * @return the address of the already deployed TradeableShares implementation corresponding\\n\\t *      to the given implementation type\\n\\t */\\n\\tfunction getSharesImplAddress(ImplementationType _implementationType) external view returns(address);\\n\\n\\t/**\\n\\t * @notice Address of the already deployed HoldersRewardsDistributor implementation\\n\\t *      to be used by the factory to deploy the HoldersRewardsDistributor contracts EIP-1167 clones\\n\\t *\\n\\t * @dev If the HoldersRewardsDistributor implementation is missing, the TradeableShares contract\\n\\t *      can still be deployed, not being attached to the HoldersRewardsDistributor\\n\\t *\\n\\t * @param _implementationType TradeableShares implementation type\\n\\t * @return the address of the already deployed HoldersRewardsDistributor implementation corresponding\\n\\t *      to the given implementation type\\n\\t */\\n\\tfunction getDistributorImplAddress(ImplementationType _implementationType) external view returns(address);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination is the address receiving the protocol fee\\n\\t *\\n\\t * @return feeDestination protocol fee destination, address\\n\\t */\\n\\tfunction getProtocolFeeDestination() external view returns(address feeDestination);\\n\\n\\t/**\\n\\t * @notice Protocol fee percent is the percentage of the buy/sell transaction volume\\n\\t *      sent to the protocol fee destination\\n\\t *\\n\\t * @dev The value has 18 decimals, 100% is represented as 10^18\\n\\t *\\n\\t * @return feePercent protocol fee percent\\n\\t */\\n\\tfunction getProtocolFeePercent() external view returns(uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Shares holders fee percent is the percentage of the buy/sell transaction volume\\n\\t *      sent to the shares holders rewards distributor contract\\n\\t *\\n\\t * @dev The value has 18 decimals, 100% is represented as 10^18\\n\\t *\\n\\t * @return feePercent shares holders fee percent\\n\\t */\\n\\tfunction getHoldersFeePercent() external view returns(uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Subject fee percent is the percentage of the buy/sell transaction volume\\n\\t *      sent to the subject issuer\\n\\t *\\n\\t * @dev The value has 18 decimals, 100% is represented as 10^18\\n\\t *\\n\\t * @dev Implementation may return different values for different callers,\\n\\t *      for example it can read SharesSubject from the caller TradeableShares contract\\n\\t *      and dynamically determine the subject fee\\n\\t *\\n\\t * @return feePercent subject fee percent\\n\\t */\\n\\tfunction getSubjectFeePercent() external view returns(uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Sets the protocol fee destination\\n\\t *\\n\\t * @dev Implementation must check the consistency of the protocol fee destination and percent\\n\\t *      set by this and `setProtocolFeePercent` functions\\n\\t *\\n\\t * @param feeDestination protocol fee destination to set\\n\\t */\\n\\tfunction setProtocolFeeDestination(address feeDestination) external;\\n\\n\\t/**\\n\\t * @notice Sets the protocol fee percent\\n\\t *\\n\\t * @dev Implementation must check the consistency of the protocol fee destination and percent\\n\\t *      set by this and `setProtocolFeeDestination` functions\\n\\t *\\n\\t * @param feePercent protocol fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setProtocolFeePercent(uint64 feePercent) external;\\n\\n\\t/**\\n\\t * @notice Sets the shares holders fee percent\\n\\t *\\n\\t * @param feePercent shares holders fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setHoldersFeePercent(uint64 feePercent) external;\\n\\n\\t/**\\n\\t * @notice Sets the subject fee percent\\n\\t *\\n\\t * @param feePercent subject fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setSubjectFeePercent(uint64 feePercent) external;\\n\\n\\t/**\\n\\t * @notice Sets all the fees at once:\\n\\t *      protocolFeeDestination\\n\\t *      protocolFeePercent\\n\\t *      holdersFeePercent\\n\\t *      subjectFeePercent\\n\\t *\\n\\t * @param protocolFeeDestination protocol fee destination to set\\n\\t * @param protocolFeePercent protocol fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t * @param holdersFeePercent shares holders fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t * @param subjectFeePercent subject fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setProtocolFee(\\n\\t\\taddress protocolFeeDestination,\\n\\t\\tuint64 protocolFeePercent,\\n\\t\\tuint64 holdersFeePercent,\\n\\t\\tuint64 subjectFeePercent\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      the curve remains paused, no shares are being bought immediately\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction deploySharesContractPaused(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject\\n\\t) external returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      the curve launches immediately, the first share is issued to the subject issuer (NFT owner)\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction deploySharesContract(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject\\n\\t) external returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      allows to immediately buy any amount of shares (including zero)\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @param amount how many shares to buy immediately after the deployment\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction deploySharesContractAndBuy(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject,\\n\\t\\tuint256 amount\\n\\t) external payable returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      allows to immediately buy any amount of shares (including zero)\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @param issuer an address to mint the NFT defined by the subject if it doesn't exist\\n\\t * @param amount how many shares to buy immediately after the deployment\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction mintSubjectAndDeployShares(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject,\\n\\t\\taddress issuer,\\n\\t\\tuint256 amount\\n\\t) external payable returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Executes signed SharesDeploymentRequest; this is identical to executing `mintSubjectAndDeployShares`\\n\\t *      on behalf of the signer and allows the transaction to be relayed so that the gas is payed by the\\n\\t *      relayer\\n\\t *\\n\\t * @param req the deployment request to fulfill, containing same data as in `mintSubjectAndDeployShares`\\n\\t * @param signature the deployment request EIP712 signature issued by the address allowed to execute\\n\\t *      the request\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction executeDeploymentRequest(\\n\\t\\tSharesDeploymentRequest calldata req,\\n\\t\\tbytes calldata signature\\n\\t) external payable returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Gets current (unused) nonce for the given issuer address;\\n\\t *      unused nonce is required to build the SharesDeploymentRequest and sign it\\n\\t *      nonces increment by one after each use\\n\\t *\\n\\t * @param issuer the issuer address to get the nonce for\\n\\t * @return current (unused) nonce; incremented by one after\\n\\t *      each successful execution of the `executeDeploymentRequest` function\\n\\t */\\n\\tfunction getNonce(address issuer) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Rewinds forward the nonce for the issuer specified, used to\\n\\t *      discard one or more signed requests to `executeDeploymentRequest`\\n\\t *\\n\\t * @dev Implementation must not allow to decrease the nonce, only increasing (rewinding)\\n\\t *      must be possible\\n\\t *\\n\\t * @param issuer the issuer address to rewind the nonce for\\n\\t * @param nonce the nonce value to rewind to\\n\\t */\\n\\tfunction rewindNonce(address issuer, uint256 nonce) external;\\n\\n\\t/**\\n\\t * @notice Gets the already deployed TradeableShares contract\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction lookupSharesContract(\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject\\n\\t) external view returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Registers or re-registers the already deployed TradeableShares contract\\n\\t *\\n\\t * @dev Initial registration is usually done manually by authorized address,\\n\\t *      Re-registration is usually done by the shares contract itself\\n\\t *      and implementations must keep the access to this function open for\\n\\t *      the already registered contracts\\n\\t *\\n\\t * @param shares already deployed TradeableShares contract\\n\\t */\\n\\tfunction registerSharesContract(TradeableShares shares) external;\\n\\n\\t/**\\n\\t * @notice Executed only by the previously registered TradeableShares contracts\\n\\t *      to notify the factory about the subject change.\\n\\t *\\n\\t * @dev The factory may throw if the subject is already taken by another contract\\n\\t */\\n\\tfunction notifySubjectUpdated() external;\\n}\\n\\n\",\"keccak256\":\"0xaa4be2c4212a8f755009135c3b4f69fa7de18a03ccc087f44b0b01cfc1c4fe70\",\"license\":\"MIT\"},\"contracts/bonding_curves/SharesSubjectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../interfaces/ERC721SpecExt.sol\\\";\\nimport \\\"./TradeableShares.sol\\\";\\n\\n/**\\n * @title Shares Subject Library\\n *\\n * @notice Auxiliary functions to work with SharesSubject struct\\n */\\nlibrary SharesSubjectLib {\\n\\t/**\\n\\t * @notice Determines current owner of the shares subject, which is a corresponding NFT owner\\n\\t *\\n\\t * @dev This function returns zero address if NFT doesn't exist, or even if NFT contract doesn't exist\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return address of the issuer, underlying NFT owner; or zero address\\n\\t */\\n\\tfunction getSharesIssuer(TradeableShares.SharesSubject memory sharesSubject) internal view returns(address) {\\n\\t\\t// we have to check if the address is callable, otherwise staticall would throw\\n\\t\\tif(isCallable(sharesSubject.tokenAddress)) {\\n\\t\\t\\t// try to avoid an exception / failed call in the ownerOf function by checking NFT existence first\\n\\t\\t\\t// this is required *only* to avoid \\\"partially failed\\\" transaction display on etherscan\\n\\t\\t\\t{\\n\\t\\t\\t\\t// we use staticcall instead of ABI function call to guaranty immutable call\\n\\t\\t\\t\\t(bool success, bytes memory data) = sharesSubject.tokenAddress.staticcall{gas: 4900}(\\n\\t\\t\\t\\t\\t// MintableERC721 interface: function exists(uint256) external view returns(bool)\\n\\t\\t\\t\\t\\tabi.encodeWithSignature(\\\"exists(uint256)\\\", sharesSubject.tokenId)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t// only if the call was successful\\n\\t\\t\\t\\tif(success) {\\n\\t\\t\\t\\t\\t// try to decode the result as a bool,\\n\\t\\t\\t\\t\\t// and if we know for sure token doesn't exist,\\n\\t\\t\\t\\t\\tif(!abi.decode(data, (bool))) {\\n\\t\\t\\t\\t\\t\\t// just return zero address as a default result in case of any error\\n\\t\\t\\t\\t\\t\\treturn address(0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// try to get the ERC721 owner of the underlying NFT\\n\\t\\t\\t{\\n\\t\\t\\t\\t// we use staticcall instead of ABI function call to guaranty immutable call\\n\\t\\t\\t\\t(bool success, bytes memory data) = sharesSubject.tokenAddress.staticcall{gas: 4900}(\\n\\t\\t\\t\\t\\t// ERC721 interface: function ownerOf(uint256) external view returns(address)\\n\\t\\t\\t\\t\\tabi.encodeWithSignature(\\\"ownerOf(uint256)\\\", sharesSubject.tokenId)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t// only if the call was successful\\n\\t\\t\\t\\tif(success) {\\n\\t\\t\\t\\t\\t// try to decode the result as an address and return\\n\\t\\t\\t\\t\\treturn abi.decode(data, (address));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// return the default zero address value in case of any errors\\n\\t\\treturn address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the owner of the shares subject's underlying NFT collection\\n\\t *\\n\\t * @dev This function returns zero address if the underlying ERC721 contract is not OZ ownable\\n\\t *      (doesn't have `owner()` function), doesn't exist, or if any other error occurs\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return address of the NFT collection owner (OZ ownable); or zero address\\n\\t */\\n\\tfunction getCollectionOwner(TradeableShares.SharesSubject memory sharesSubject) internal view returns(address) {\\n\\t\\t// we have to check if the address is callable, otherwise staticall would throw\\n\\t\\tif(isCallable(sharesSubject.tokenAddress)) {\\n\\t\\t\\t// try to derive the owner via the OZ Ownable interface owner()\\n\\t\\t\\t// we use staticcall instead of ABI function call to guaranty immutable call\\n\\t\\t\\t(bool success, bytes memory data) = sharesSubject.tokenAddress.staticcall{gas: 4900}(\\n\\t\\t\\t\\t// OZ Ownable interface: function owner() external view returns(address)\\n\\t\\t\\t\\tabi.encodeWithSignature(\\\"owner()\\\")\\n\\t\\t\\t);\\n\\n\\t\\t\\t// only if the call was successful\\n\\t\\t\\tif(success) {\\n\\t\\t\\t\\t// try to decode the result as an address and return\\n\\t\\t\\t\\treturn abi.decode(data, (address));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// return the default zero address value in case of any errors\\n\\t\\treturn address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the keccak256 bytes32 key for the shares subject to be used in the mappings\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return keccak256 of the shares subject\\n\\t */\\n\\tfunction getSharesKey(TradeableShares.SharesSubject memory sharesSubject) internal pure returns(bytes32) {\\n\\t\\t// calculate the keccak256 from the concatenated internals of the SharesSubject struct\\n\\t\\treturn keccak256(abi.encode(sharesSubject.tokenAddress, sharesSubject.tokenId));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if two subjects - subject 1 and subject 2 - are equal\\n\\t *      Returns false if any of the subjects is not initialized (have zero ERC721 address)\\n\\t *\\n\\t * @param sharesSubject1 subject 1\\n\\t * @param sharesSubject2 subject 2\\n\\t * @return true if subject 1 and subject 2 are equal\\n\\t */\\n\\tfunction equals(\\n\\t\\tTradeableShares.SharesSubject memory sharesSubject1,\\n\\t\\tTradeableShares.SharesSubject memory sharesSubject2\\n\\t) internal pure returns(bool) {\\n\\t\\treturn sharesSubject1.tokenAddress != address(0)\\n\\t\\t\\t&& sharesSubject1.tokenAddress == sharesSubject2.tokenAddress\\n\\t\\t\\t&& sharesSubject1.tokenId == sharesSubject2.tokenId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verifies if the shares subject contains a value; this function is useful\\n\\t *      to check if the value in storage (mapping) was initialized\\n\\t *\\n\\t * @param sharesSubject the shares subject to check\\n\\t * @return true if the subject has a value, false otherwise (zero value)\\n\\t */\\n\\tfunction isZero(TradeableShares.SharesSubject memory sharesSubject) internal pure returns(bool) {\\n\\t\\treturn sharesSubject.tokenAddress == address(0) && sharesSubject.tokenId == 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if account can be called (is callable, already deployed contract)\\n\\t *\\n\\t * @dev Verifies if the bytecode on the specified address is present\\n\\t *\\n\\t * @param account an address to check\\n\\t * @return true if address denotes already deployed callable contract\\n\\t */\\n\\tfunction isCallable(address account) internal view returns(bool) {\\n\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\n\\t\\t// construction, since the code is only stored at the end of the\\n\\t\\t// constructor execution.\\n\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0206165e0aaeffa4c3152e0ec237e14fb7bba28b2c6b10981ff45b7171cfd914\",\"license\":\"MIT\"},\"contracts/bonding_curves/TradeableShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BondingCurve.sol\\\";\\nimport \\\"./HoldersRewardsDistributor.sol\\\";\\n\\n/**\\n * @title Tradeable Shares\\n *\\n * @notice Tradeable shares is a non-transferable, but buyable/sellable fungible token-like asset,\\n *      which is sold/bought solely by the shares contract at the predefined by\\n *      the bonding curve function price\\n *\\n * @notice The shares is bound to its \\\"subject\\\" \\u2013 an NFT; the NFT owner gets the subject fee\\n *      emerging in every buy/sell operation\\n *\\n * @dev Based on the friend.tech FriendtechSharesV1.sol\\n */\\ninterface TradeableShares is BondingCurve {\\n\\t/**\\n\\t * @notice Shares subject is an NFT defined by its ERC721 contract address and NFT ID\\n\\t *       Note: this is different from the original FriendTech implementation where\\n\\t *       shares subject is always equal to the issuer address\\n\\t */\\n\\tstruct SharesSubject {\\n\\t\\t/// @dev ERC721 contract address\\n\\t\\taddress tokenAddress;\\n\\n\\t\\t/// @dev NFT ID\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fired in `buyShares` and `sellShares` functions, this event logs\\n\\t *      the entire trading activity happening on the curve\\n\\t *\\n\\t * @dev Trader, that is the buyer or seller, depending on the operation type is the transaction sender\\n\\t *\\n\\t * @param beneficiary the address which receives shares or funds, usually this is the trader itself\\n\\t * @param issuer subject issuer, usually an owner of the NFT defined by the subject\\n\\t * @param isBuy true if the event comes from the `buyShares` and represents the buy operation,\\n\\t *      false if the event comes from the `sellShares` and represents the sell operation\\n\\t * @param sharesAmount amount of the shares bought or sold (see `isBuy`)\\n\\t * @param paidAmount amount of ETH spent or gained by the buyer or seller;\\n\\t *      this is implementation dependent and can represent an amount of ERC20 payment token\\n\\t * @param protocolFeeAmount amount of fees paid to the protocol\\n\\t * @param holdersFeeAmount amount of fees paid to the shares holders\\n\\t * @param subjectFeeAmount amount of fees paid to the subject (issuer)\\n\\t * @param supply total shares supply after the operation\\n\\t */\\n\\tevent Trade(\\n\\t\\taddress indexed beneficiary,\\n\\t\\taddress indexed issuer,\\n\\t\\tbool indexed isBuy,\\n\\t\\tuint256 sharesAmount,\\n\\t\\tuint256 paidAmount,\\n\\t\\tuint256 protocolFeeAmount,\\n\\t\\tuint256 holdersFeeAmount,\\n\\t\\tuint256 subjectFeeAmount,\\n\\t\\tuint256 supply\\n\\t);\\n\\n\\t/**\\n\\t * @notice Shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return Shares subject as a SharesSubject struct, this is an NFT if all currently known implementations\\n\\t */\\n\\tfunction getSharesSubject() external view returns(SharesSubject calldata);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination, the address protocol fee is sent to\\n\\t *\\n\\t * @dev Mutable, can be changed by the protocol fee manager\\n\\t *\\n\\t * @return the address where the protocol fee is sent to\\n\\t */\\n\\tfunction getProtocolFeeDestination() external view returns(address);\\n\\n\\t/**\\n\\t * @notice Protocol fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @notice Protocol fee is sent to the protocol fee destination (see `getProtocolFeeDestination`)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return protocol fee percent with the 18 decimals (10^18 is 100%)\\n\\t */\\n\\tfunction getProtocolFeePercent() external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination and protocol fee percent as a tuple;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @dev Implementation must always return zero fee percent if fee destination is zero address\\n\\t *\\n\\t * @return feeDestination protocol fee destination\\n\\t * @return feePercent protocol fee percent, zero if protocol fee destination is zero\\n\\t */\\n\\tfunction getProtocolFeeInfo() external view returns(address feeDestination, uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Shares holders reward distributor contract attached to the shares contract\\n\\t *      in order to receive its portion of the fees to be distributed among the shares holders\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value; holders fee destination is not\\n\\t *      an arbitrary address capable of receiving ETH or ERC20, but a HoldersRewardsDistributor\\n\\t *      smart contract, which not only receives the fees but also receives updated on the\\n\\t *      trading activity in the shares contract\\n\\t *\\n\\t * @return the contract where the holders fee is sent to\\n\\t */\\n\\tfunction getHoldersFeeDestination() external view returns(HoldersRewardsDistributor);\\n\\n\\t/**\\n\\t * @notice Shares holders fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @notice Shares holders fee is sent to the holders fee destination (see `getHoldersFeeDestination`)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return shares holders fee percent with the 18 decimals (10^18 is 100%)\\n\\t */\\n\\tfunction getHoldersFeePercent() external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Shares holders fee destination and shares holders fee percent as a tuple;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @dev Implementation must always return zero fee percent if fee destination is zero\\n\\t *\\n\\t * @return feeDestination shares holders fee destination\\n\\t * @return feePercent shares holders fee percent, zero if holders fee destination is zero\\n\\t */\\n\\tfunction getHoldersFeeInfo() external view returns(HoldersRewardsDistributor feeDestination, uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Subject fee destination and subject fee percent as a tuple;\\n\\t *      subject fee destination is shares issuer address;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%;\\n\\t *\\n\\t * @dev Implementation must always return zero fee percent if fee destination is zero address\\n\\t *\\n\\t * @return feeDestination protocol fee destination\\n\\t * @return feePercent protocol fee percent, zero if subject fee destination is zero\\n\\t */\\n\\tfunction getSubjectFeeInfo() external view returns(address feeDestination, uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Subject fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @notice Subject fee is sent to the subject fee issuer (see `getSharesIssuer`)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return subject fee percent with the 18 decimals (10^18 is 100%)\\n\\t */\\n\\tfunction getSubjectFeePercent() external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Shares issuer, the receiver of the shares fees\\n\\t *\\n\\t * @dev Mutable, changes (potentially frequently and unpredictably) when the NFT owner changes;\\n\\t *      subject to the front-run attacks, off-chain client applications must not rely on this address\\n\\t *      in anyway\\n\\t *\\n\\t * @return nftOwner subject issuer, the owner of the NFT\\n\\t */\\n\\tfunction getSharesIssuer() external view returns(address nftOwner);\\n\\n\\t/**\\n\\t * @notice Shares balance of the given holder; this function is similar to ERC20.balanceOf()\\n\\t *\\n\\t * @param holder the address to check the balance for\\n\\t *\\n\\t * @return balance number of shares the holder has\\n\\t */\\n\\tfunction getSharesBalance(address holder) external view returns(uint256 balance);\\n\\n\\t/**\\n\\t * @notice Total amount of the shares in existence, the sum of all individual shares balances;\\n\\t *      this function is similar to ERC20.totalSupply()\\n\\t *\\n\\t * @return supply total shares supply\\n\\t */\\n\\tfunction getSharesSupply() external view returns(uint256 supply);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to buy calculated based on\\n\\t *      the specified total shares supply\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to buy\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPrice(uint256 supply, uint256 amount) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to sell calculated based on\\n\\t *      the specified total shares supply\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to sell\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPrice(uint256 supply, uint256 amount) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to buy, including all fees;\\n\\t *      calculated based on the specified total shares supply and fees percentages\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to buy\\n\\t * @param protocolFeePercent protocol fee percent\\n\\t * @param holdersFeePercent shares holders fee percent\\n\\t * @param subjectFeePercent protocol fee percent\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPriceAfterFee(\\n\\t\\tuint256 supply,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 protocolFeePercent,\\n\\t\\tuint256 holdersFeePercent,\\n\\t\\tuint256 subjectFeePercent\\n\\t) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to sell, including all fees;\\n\\t *      calculated based on the specified total shares supply and fees percentages\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to sell\\n\\t * @param protocolFeePercent protocol fee percent\\n\\t * @param holdersFeePercent shares holders fee percent\\n\\t * @param subjectFeePercent protocol fee percent\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPriceAfterFee(\\n\\t\\tuint256 supply,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 protocolFeePercent,\\n\\t\\tuint256 holdersFeePercent,\\n\\t\\tuint256 subjectFeePercent\\n\\t) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to buy; calculated based on\\n\\t *      the current total shares supply\\n\\t *\\n\\t * @param amount number of shares to buy\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPrice(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to sell; calculated based on\\n\\t *      the current total shares supply\\n\\t *\\n\\t * @param amount number of shares to sell\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPrice(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to buy, including all fees;\\n\\t *      calculated based on the current total shares supply and fees percentages\\n\\t *\\n\\t * @param amount number of shares to buy\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPriceAfterFee(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to sell, including all fees;\\n\\t *      calculated based on the current total shares supply and fees percentages\\n\\t *\\n\\t * @param amount number of shares to sell\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPriceAfterFee(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Buy `amount` of shares. Sender has to supply `getBuyPriceAfterFee(amount)` ETH.\\n\\t *      First share can be bought only by current subject issuer.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token payment may be required instead of ETH.\\n\\t *      In such a case, implementation must through if ETH is sent, effectively overriding\\n\\t *      the function definition as non-payable\\n\\t *\\n\\t * @param amount amount of the shares to buy\\n\\t */\\n\\tfunction buyShares(uint256 amount) external payable;\\n\\n\\t/**\\n\\t * @notice Buy `amount` of shares in the favor of the address specified (beneficiary).\\n\\t *      Sender has to supply `getBuyPriceAfterFee(amount)` ETH.\\n\\t *      First share can be bought only by current subject issuer.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token payment may be required instead of ETH.\\n\\t *      In such a case, implementation must through if ETH is sent, effectively overriding\\n\\t *      the function definition as non-payable\\n\\t *\\n\\t * @param amount amount of the shares to buy\\n\\t * @param beneficiary an address receiving the shares\\n\\t */\\n\\tfunction buySharesTo(uint256 amount, address beneficiary) external payable;\\n\\n\\t/**\\n\\t * @notice Sell `amount` of shares. Sender gets `getSellPriceAfterFee(amount)` of ETH.\\n\\t *      Last share cannot be sold.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token may be payed instead of ETH.\\n\\t *\\n\\t * @param amount amount of the shares to sell\\n\\t */\\n\\tfunction sellShares(uint256 amount) external;\\n\\n\\t/**\\n\\t * @notice Sell `amount` of shares in the favor of the address specified (beneficiary).\\n\\t *      The beneficiary gets `getSellPriceAfterFee(amount)` of ETH.\\n\\t *      Last share cannot be sold.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token may be payed instead of ETH.\\n\\t *\\n\\t * @param amount amount of the shares to sell\\n\\t * @param beneficiary an address receiving the funds from the sale\\n\\t */\\n\\tfunction sellSharesTo(uint256 amount, address payable beneficiary) external;\\n}\\n\",\"keccak256\":\"0x638a9b133d0a93471b0b3c2a684a9a24ebbb83975892aeff5d277ceb72a2a1cc\",\"license\":\"MIT\"},\"contracts/interfaces/ERC1363Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC20Spec.sol\\\";\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC1363 Interface\\n *\\n * @dev Interface defining a ERC1363 Payable Token contract.\\n *      Implementing contracts MUST implement the ERC1363 interface as well as the ERC20 and ERC165 interfaces.\\n */\\ninterface ERC1363 is ERC20, ERC165  {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n\\t * 0xb0202a11 ===\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address to, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address to, uint256 value, bytes memory data) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n\\t * @param from address The address which you want to send tokens from\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\t/**\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n\\t * @param from address The address which you want to send tokens from\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address from, address to, uint256 value, bytes memory data) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n\\t * and then call `onApprovalReceived` on spender.\\n\\t * @param spender address The address which will spend the funds\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t */\\n\\tfunction approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n\\t * and then call `onApprovalReceived` on spender.\\n\\t * @param spender address The address which will spend the funds\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t * @param data bytes Additional data with no specified format, sent in call to `spender`\\n\\t */\\n\\tfunction approveAndCall(address spender, uint256 value, bytes memory data) external returns (bool);\\n}\\n\\n/**\\n * @title ERC1363Receiver Interface\\n *\\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\\n *      from ERC1363 token contracts.\\n */\\ninterface ERC1363Receiver {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\\n\\t * 0x88a7ca5c === bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Handle the receipt of ERC1363 tokens\\n\\t *\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\n\\t *      after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\n\\t *      transfer. Return of other than the magic value MUST result in the\\n\\t *      transaction being reverted.\\n\\t *      Note: the token contract address is always the message sender.\\n\\t *\\n\\t * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\n\\t * @param from address The address which are token transferred from\\n\\t * @param value uint256 The amount of tokens transferred\\n\\t * @param data bytes Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))`\\n\\t *      unless throwing\\n\\t */\\n\\tfunction onTransferReceived(address operator, address from, uint256 value, bytes memory data) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC1363Spender Interface\\n *\\n * @dev Interface for any contract that wants to support `approveAndCall`\\n *      from ERC1363 token contracts.\\n */\\ninterface ERC1363Spender {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\\n\\t * 0x7b04a2d0 === bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Handle the approval of ERC1363 tokens\\n\\t *\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\n\\t *      after an `approve`. This function MAY throw to revert and reject the\\n\\t *      approval. Return of other than the magic value MUST result in the\\n\\t *      transaction being reverted.\\n\\t *      Note: the token contract address is always the message sender.\\n\\t *\\n\\t * @param owner address The address which called `approveAndCall` function\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t * @param data bytes Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))`\\n\\t *      unless throwing\\n\\t */\\n\\tfunction onApprovalReceived(address owner, uint256 value, bytes memory data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5a9800736f8d59f69ddeb59babcc71ec0ba439150ea1ecac1f4c30d8e4a98d5e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-20: ERC-20 Token Standard\\n *\\n * @notice The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015,\\n *      is a Token Standard that implements an API for tokens within Smart Contracts.\\n *\\n * @notice It provides functionalities like to transfer tokens from one account to another,\\n *      to get the current token balance of an account and also the total supply of the token available on the network.\\n *      Besides these it also has some other functionalities like to approve that an amount of\\n *      token from an account can be spent by a third party account.\\n *\\n * @notice If a Smart Contract implements the following methods and events it can be called an ERC-20 Token\\n *      Contract and, once deployed, it will be responsible to keep track of the created tokens on Ethereum.\\n *\\n * @notice See https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\\n * @notice See https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface ERC20 {\\n\\t/**\\n\\t * @dev Fired in transfer(), transferFrom() to indicate that token transfer happened\\n\\t *\\n\\t * @param from an address tokens were consumed from\\n\\t * @param to an address tokens were sent to\\n\\t * @param value number of tokens transferred\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in approve() to indicate an approval event happened\\n\\t *\\n\\t * @param owner an address which granted a permission to transfer\\n\\t *      tokens on its behalf\\n\\t * @param spender an address which received a permission to transfer\\n\\t *      tokens on behalf of the owner `_owner`\\n\\t * @param value amount of tokens granted to transfer on behalf\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @return name of the token (ex.: USD Coin)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @return symbol of the token (ex.: USDC)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t *      For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t *      be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * @dev Tokens usually opt for a value of 18, imitating the relationship between\\n\\t *      Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t *      overridden;\\n\\t *\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\n\\t *      no way affects any of the arithmetic of the contract, including\\n\\t *      {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t *\\n\\t * @return token decimals\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function decimals() external view returns (uint8);\\n\\n\\t/**\\n\\t * @return the amount of tokens in existence\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Gets the balance of a particular address\\n\\t *\\n\\t * @param _owner the address to query the the balance for\\n\\t * @return balance an amount of tokens owned by the address specified\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * self address or\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transfer(address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner (transaction sender)\\n\\t *\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approve(address _spender, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n\\t *\\n\\t * @dev A function to check an amount of tokens owner approved\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\n\\t *\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n\\t *      of token owner `_owner`\\n\\t */\\n\\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\\n/**\\n * @title Mintable/burnable ERC20 Extension\\n *\\n * @notice Adds mint/burn functions to ERC20 interface, these functions\\n *      are usually present in ERC20 implementations, but these become\\n *      a must for the bridged tokens in L2 since the bridge on L2\\n *      needs to have a way to mint tokens deposited from L1 to L2\\n *      and to burn tokens to be withdrawn from L2 to L1\\n */\\ninterface MintableBurnableERC20 is ERC20 {\\n\\t/**\\n\\t * @dev Mints (creates) some tokens to address specified\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _value an amount of tokens to mint (create)\\n\\t */\\n\\tfunction mint(address _to, uint256 _value) external;\\n\\n\\t/**\\n\\t * @dev Burns (destroys) some tokens from the address specified\\n\\t *\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @param _from an address to burn some tokens from\\n\\t * @param _value an amount of tokens to burn (destroy)\\n\\t */\\n\\tfunction burn(address _from, uint256 _value) external;\\n}\\n\",\"keccak256\":\"0xb07fc5b34a9814eac569e73cb23d352e0547b5736e09c9e50234bc23344144e1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev Solidity issue #3412: The ERC721 interfaces include explicit mutability guarantees for each function.\\n *      Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure.\\n *      Implementation MUST meet the mutability guarantee in this interface and MAY meet a stronger guarantee.\\n *      For example, a payable function in this interface may be implemented as nonpayable\\n *      (no state mutability specified) in implementing contract.\\n *      It is expected a later Solidity release will allow stricter contract to inherit from this interface,\\n *      but current workaround is that we edit this interface to add stricter mutability before inheriting:\\n *      we have removed all \\\"payable\\\" modifiers.\\n *\\n * @dev The ERC-165 identifier for this interface is 0x80ac58cd.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721 is ERC165 {\\n\\t/// @dev This emits when ownership of any NFT changes by any mechanism.\\n\\t///  This event emits when NFTs are created (`from` == 0) and destroyed\\n\\t///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n\\t///  may be created and assigned without emitting Transfer. At the time of\\n\\t///  any transfer, the approved address for that NFT (if any) is reset to none.\\n\\tevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when the approved address for an NFT is changed or\\n\\t///  reaffirmed. The zero address indicates there is no approved address.\\n\\t///  When a Transfer event emits, this also indicates that the approved\\n\\t///  address for that NFT (if any) is reset to none.\\n\\tevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when an operator is enabled or disabled for an owner.\\n\\t///  The operator can manage all NFTs of the owner.\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\t/// @notice Count all NFTs assigned to an owner\\n\\t/// @dev NFTs assigned to the zero address are considered invalid, and this\\n\\t///  function throws for queries about the zero address.\\n\\t/// @param _owner An address for whom to query the balance\\n\\t/// @return The number of NFTs owned by `_owner`, possibly zero\\n\\tfunction balanceOf(address _owner) external view returns (uint256);\\n\\n\\t/// @notice Find the owner of an NFT\\n\\t/// @dev NFTs assigned to zero address are considered invalid, and queries\\n\\t///  about them do throw.\\n\\t/// @param _tokenId The identifier for an NFT\\n\\t/// @return The address of the owner of the NFT\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n\\t///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t///  `onERC721Received` on `_to` and throws if the return value is not\\n\\t///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\t/// @param _data Additional data with no specified format, sent in call to `_to`\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external /*payable*/;\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev This works identically to the other function with an extra data parameter,\\n\\t///  except this function just sets data to \\\"\\\".\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n\\t///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n\\t///  THEY MAY BE PERMANENTLY LOST\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Change or reaffirm the approved address for an NFT\\n\\t/// @dev The zero address indicates there is no approved address.\\n\\t///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n\\t///  operator of the current owner.\\n\\t/// @param _approved The new approved NFT controller\\n\\t/// @param _tokenId The NFT to approve\\n\\tfunction approve(address _approved, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t///  all of `msg.sender`'s assets\\n\\t/// @dev Emits the ApprovalForAll event. The contract MUST allow\\n\\t///  multiple operators per owner.\\n\\t/// @param _operator Address to add to the set of authorized operators\\n\\t/// @param _approved True if the operator is approved, false to revoke approval\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\t/// @notice Get the approved address for a single NFT\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT.\\n\\t/// @param _tokenId The NFT to find the approved address for\\n\\t/// @return The approved address for this NFT, or the zero address if there is none\\n\\tfunction getApproved(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Query if an address is an authorized operator for another address\\n\\t/// @param _owner The address that owns the NFTs\\n\\t/// @param _operator The address that acts on behalf of the owner\\n\\t/// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param _operator The address which called `safeTransferFrom` function\\n\\t/// @param _from The address which previously owned the token\\n\\t/// @param _tokenId The NFT identifier which is being transferred\\n\\t/// @param _data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x5b5e139f.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Metadata is ERC721 {\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\n\\tfunction name() external view returns (string memory _name);\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract\\n\\tfunction symbol() external view returns (string memory _symbol);\\n\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n\\t///  Metadata JSON Schema\\\".\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x780e9d63.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Enumerable is ERC721 {\\n\\t/// @notice Count NFTs tracked by this contract\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/// @notice Enumerate valid NFTs\\n\\t/// @dev Throws if `_index` >= `totalSupply()`.\\n\\t/// @param _index A counter less than `totalSupply()`\\n\\t/// @return The token identifier for the `_index`th NFT,\\n\\t///  (sort order not specified)\\n\\tfunction tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n\\t/// @notice Enumerate NFTs assigned to an owner\\n\\t/// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n\\t///  `_owner` is the zero address, representing invalid NFTs.\\n\\t/// @param _owner An address where we are interested in NFTs owned by them\\n\\t/// @param _index A counter less than `balanceOf(_owner)`\\n\\t/// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n\\t///   (sort order not specified)\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe57d29caebdb7151575f0644ba5c5865fcc498e87f255aae97523871893f56c2\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721SpecExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Mintable ERC721\\n *\\n * @notice Defines mint capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface MintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\\n/**\\n * @title Alethea Burnable ERC721\\n *\\n * @notice Defines burn capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what burnable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface BurnableERC721 {\\n\\t/**\\n\\t * @notice Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Should be accessible publicly by token owners.\\n\\t *      May have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) external;\\n}\\n\\n/**\\n * @title With Base URI\\n *\\n * @notice A marker interface for the contracts having the baseURI() function\\n *      or public string variable named baseURI\\n *      NFT implementations like TinyERC721, or ShortERC721 are example of such smart contracts\\n *\\n * @author Basil Gorin\\n */\\ninterface WithBaseURI {\\n\\t/**\\n\\t * @dev Usually used in NFT implementations to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t */\\n\\tfunction baseURI() external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x76bb7f54420c208fbe8a1a0792ebe54dfd5ce06b90e571ab5c20acab610d3d05\",\"license\":\"MIT\"},\"contracts/utils/InitializableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Initializable Role-based Access Control (RBAC) // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an initializable version of the RBAC, based on Zeppelin implementation,\\n *      it can be used for ERC1967 proxies, as well as for EIP-1167 minimal proxies\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *      see https://eips.ethereum.org/EIPS/eip-1167\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#Clones\\n *\\n * @author Basil Gorin\\n */\\nabstract contract InitializableAccessControl is Initializable {\\n\\t/**\\n\\t * @dev Privileged addresses with defined roles/permissions\\n\\t * @dev In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t *\\n\\t * @dev We keep the mapping private to prevent direct writes to it from the inheriting\\n\\t *      contracts, `getRole()` and `updateRole()` functions should be used instead\\n\\t */\\n\\tmapping(address => uint256) private userRoles;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @notice Upgrade manager is responsible for smart contract upgrades,\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n\\t *\\n\\t * @dev Role ROLE_UPGRADE_MANAGER allows passing the _authorizeUpgrade() check\\n\\t * @dev Role ROLE_UPGRADE_MANAGER has single bit at position 254 enabled\\n\\t */\\n\\tuint256 public constant ROLE_UPGRADE_MANAGER = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param operator address which was granted/revoked permissions\\n\\t * @param requested permissions requested\\n\\t * @param assigned permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed operator, uint256 requested, uint256 assigned);\\n\\n\\t/**\\n\\t * @notice Function modifier making a function defined as public behave as restricted\\n\\t *      (so that only a pre-configured set of accounts can execute it)\\n\\t *\\n\\t * @param role the role transaction executor is required to have;\\n\\t *      the function throws an \\\"access denied\\\" exception if this condition is not met\\n\\t */\\n\\tmodifier restrictedTo(uint256 role) {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(role), \\\"access denied\\\");\\n\\n\\t\\t// execute the rest of the function\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates/deploys the ACL implementation to be used in a proxy\\n\\t *\\n\\t * @dev Note:\\n\\t *      the implementation is already initialized and\\n\\t *      `_postConstruct` is not executable on the implementation\\n\\t *      `_postConstruct` is still available in the context of a proxy\\n\\t *      and should be executed on the proxy deployment (in the same tx)\\n\\t */\\n\\t // constructor() initializer {}\\n\\n\\t/**\\n\\t * @dev Contract initializer, sets the contract owner to have full privileges\\n\\t *\\n\\t * @dev Can be executed only once, reverts when executed second time\\n\\t *\\n\\t * @dev IMPORTANT:\\n\\t *      this function SHOULD be executed during proxy deployment (in the same transaction)\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(address _owner) internal virtual onlyInitializing {\\n\\t\\t// grant owner full privileges\\n\\t\\t__setRole(_owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Highest version that has been initialized.\\n\\t *      Non-zero value means contract was already initialized.\\n\\t * @dev see {Initializable}, {reinitializer}.\\n\\t *\\n\\t * @return highest version that has been initialized\\n\\t */\\n/*\\n\\tfunction getInitializedVersion() public view returns(uint64) {\\n\\t\\t// delegate to `_getInitializedVersion`\\n\\t\\treturn _getInitializedVersion();\\n\\t}\\n*/\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address mapping of `userRoles`\\n\\t\\treturn getRole(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads the permissions (role) for a given user from the `userRoles` mapping\\n\\t *      (privileged addresses with defined roles/permissions)\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Having a simple getter instead of making the mapping public\\n\\t *      allows enforcing the encapsulation of the mapping and protects from\\n\\t *      writing to it directly in the inheriting smart contracts\\n\\t *\\n\\t * @param operator address of a user to read permissions for,\\n\\t *      or self address to read global features of the smart contract\\n\\t */\\n\\tfunction getRole(address operator) public view returns(uint256) {\\n\\t\\t// read the value from `userRoles` and return\\n\\t\\treturn userRoles[operator];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\t__setRole(operator, role, _evaluateBy(msg.sender, getRole(operator), role));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction _evaluateBy(address operator, uint256 target, uint256 desired) internal view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = getRole(operator);\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @dev Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(getRole(operator), required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the `assignedRole` role to the operator, logs both `requestedRole` and `actualRole`\\n\\t *\\n\\t * @dev Unsafe:\\n\\t *      provides direct write access to `userRoles` mapping without any security checks,\\n\\t *      doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param requestedRole bitmask representing a set of permissions requested\\n\\t *      to be enabled/disabled for a user specified, used only to be logged into event\\n\\t * @param assignedRole bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified, used to update the mapping and to be logged into event\\n\\t */\\n\\tfunction __setRole(address operator, uint256 requestedRole, uint256 assignedRole) private {\\n\\t\\t// assign the role to the operator\\n\\t\\tuserRoles[operator] = assignedRole;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(operator, requestedRole, assignedRole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) private pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4401ac10646baffe69521c6e6ae82ab76c2fbdfbe1c39bc0fb6028996a298284\",\"license\":\"MIT\"},\"contracts/utils/Transfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @notice Replaces built-in Solidity address.transfer and address.send functions\\n *      with the address.call function\\n */\\nlibrary Transfers {\\n\\t/// @dev Mimics address.send forwarding 4,900 gas\\n\\tfunction send(address payable to, uint256 value) internal returns(bool) {\\n\\t\\t(bool success, ) = to.call{gas: 4900, value: value}(\\\"\\\");\\n\\t\\treturn success;\\n\\t}\\n\\n\\t/// @dev Mimics address.transfer forwarding 4,900 gas\\n\\tfunction transfer(address payable to, uint256 value) internal {\\n\\t\\trequire(send(to, value), \\\"failed to send ether\\\");\\n\\t}\\n\\n\\t/// @dev Alias for `send`\\n\\tfunction send1(address payable to, uint256 value) internal returns(bool) {\\n\\t\\treturn send(to, value);\\n\\t}\\n\\n\\t/// @dev Alias for `transfer`\\n\\tfunction transfer1(address payable to, uint256 value) internal {\\n\\t\\ttransfer(to, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc0f5a4f1c527b8bdbedf63c3342657e0ddf3a03b0f80c6117adb51f208cc9cbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405162002dea38038062002dea833981016040819052620000269162000cb6565b600054610100900460ff16620000435760005460ff16156200004d565b6200004d620000fe565b620000a55760405162461bcd60e51b815260206004820152602e602482015260008051602062002daa83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015620000c8576000805461ffff19166101011790555b620000db8a8a8a8a8a8a8a8a8a6200011c565b8015620000ee576000805461ff00191690555b5050505050505050505062000ed4565b600062000116306200022d60201b620013041760201c565b15905090565b600054610100900460ff16620001395760005460ff161562000143565b62000143620000fe565b620001975760405162461bcd60e51b815260206004820152602e602482015260008051602062002daa83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200009c565b600054610100900460ff16158015620001ba576000805461ffff19166101011790555b620001cb8a8a8a8a8a8a8a62000233565b8215620001e457620001de838362000323565b6200020e565b34156200020e576200020e34336001600160a01b0316620004f560201b6200130a1790919060201c565b801562000221576000805461ff00191690555b50505050505050505050565b3b151590565b600054610100900460ff166200028f5760405162461bcd60e51b815260206004820152602b602482015260008051602062002dca83398151915260448201526a6e697469616c697a696e6760a81b60648201526084016200009c565b6200029a8762000505565b8551603380546001600160a01b0319166001600160a01b03928316179055602090960151603455603580549587166001600160e01b031996871617600160a01b6001600160401b039687168102919091179091556036805494909716939095169290921790831690930292909217909255603780546001600160401b0319169190921617905550565b60006200032f60385490565b6001600160a01b0383166000908152603960205260408120805492935085929091906200035e90849062000dd8565b90915550620003709050838262000dd8565b603855600062000381828562000573565b905060006200039082620006c2565b925050506000620003ab83600188886200073960201b60201c565b92505050600080620003c3856200087760201b60201c565b9250509150600081848688620003da919062000dd8565b620003e6919062000dd8565b620003f2919062000dd8565b905080341015620004465760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e742076616c756520737570706c696564000000000060448201526064016200009c565b803411156200047d576200047d6200045f823462000df3565b336001600160a01b0316620004f560201b6200130a1790919060201c565b603854604080518b815260208101899052908101879052606081018690526080810184905260a08101919091526001906001600160a01b0380861691908b16907f952ff8d90add9fdeaeb478102d54441cf0cc0cbe53b1d99e51f747cdc8379e549060c00160405180910390a4505050505050505050565b62000501828262000885565b5050565b600054610100900460ff16620005615760405162461bcd60e51b815260206004820152602b602482015260008051602062002dca83398151915260448201526a6e697469616c697a696e6760a81b60648201526084016200009c565b620005708160001980620008df565b50565b6000808315620005de5760066200058c60018662000df3565b6200059990600262000e0d565b620005a690600162000dd8565b85620005b460018262000df3565b620005c0919062000e0d565b620005cc919062000e0d565b620005d8919062000e2f565b620005e1565b60005b9050600084158015620005f5575060018411155b6200068057600660016200060a868862000dd8565b62000616919062000df3565b6200062390600262000e0d565b6200063090600162000dd8565b6200063c868862000dd8565b60016200064a888a62000dd8565b62000656919062000df3565b62000662919062000e0d565b6200066e919062000e0d565b6200067a919062000e2f565b62000683565b60005b9050600062000693838362000df3565b9050613e80620006ac82670de0b6b3a764000062000e0d565b620006b8919062000e2f565b9695505050505050565b60008080620006d062000939565b9093509150670de0b6b3a7640000620006ea838662000e0d565b620006f6919062000e2f565b905080158015906200072857506200072681846001600160a01b03166200098a60201b620013141790919060201c565b155b1562000732575060005b9193909250565b60008080620007476200099f565b9093509150670de0b6b3a764000062000761838962000e0d565b6200076d919062000e2f565b90506001600160a01b038316158015906200078757508415155b156200086d57604080516001600160a01b0386166020820152871515918101919091526060810186905260009060800160405160208183030381529060405290506000846001600160a01b03168383604051620007e5919062000e52565b60006040518083038185875af1925050503d806000811462000824576040519150601f19603f3d011682016040523d82523d6000602084013e62000829565b606091505b50509050806200086a5760405162461bcd60e51b815260206004820152600b60248201526a1cde5b98c819985a5b195960aa1b60448201526064016200009c565b50505b9450945094915050565b60008080620006d0620009e1565b62000891828262000a12565b620005015760405162461bcd60e51b815260206004820152601460248201527f6661696c656420746f2073656e6420657468657200000000000000000000000060448201526064016200009c565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b6000806200094f6035546001600160a01b031690565b91506001600160a01b0382161562000981576200097b603554600160a01b90046001600160401b031690565b62000984565b60005b90509091565b600062000998838362000a12565b9392505050565b600080620009b56036546001600160a01b031690565b91506001600160a01b0382161562000981576200097b603654600160a01b90046001600160401b031690565b600080620009ee62000a76565b91506001600160a01b0382161562000981576037546001600160401b031662000984565b600080836001600160a01b031661132484604051600060405180830381858888f193505050503d806000811462000a66576040519150601f19603f3d011682016040523d82523d6000602084013e62000a6b565b606091505b509095945050505050565b604080518082019091526033546001600160a01b0316815260345460208083019190915260009162000ab1916200132062000ab6821b17901c565b905090565b80516000903b1562000c6e5760008083600001516001600160a01b0316611324856020015160405160240162000aee91815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634f558e7960e01b1790525162000b25919062000e52565b6000604051808303818686fa925050503d806000811462000b63576040519150601f19603f3d011682016040523d82523d6000602084013e62000b68565b606091505b5091509150811562000b99578080602001905181019062000b8a919062000e90565b62000b99575060009392505050565b505060008083600001516001600160a01b0316611324856020015160405160240162000bc791815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166331a9108f60e11b1790525162000bfe919062000e52565b6000604051808303818686fa925050503d806000811462000c3c576040519150601f19603f3d011682016040523d82523d6000602084013e62000c41565b606091505b5091509150811562000c6b578080602001905181019062000c63919062000eb4565b949350505050565b50505b506000919050565b6001600160a01b03811681146200057057600080fd5b805162000c998162000c76565b919050565b80516001600160401b038116811462000c9957600080fd5b6000806000806000806000806000898b0361014081121562000cd757600080fd5b8a5162000ce48162000c76565b99506040601f198201121562000cf957600080fd5b50604080519081016001600160401b038111828210171562000d2b57634e487b7160e01b600052604160045260246000fd5b60405260208b015162000d3e8162000c76565b815260408b01516020820152975062000d5a60608b0162000c8c565b965062000d6a60808b0162000c9e565b955062000d7a60a08b0162000c8c565b945062000d8a60c08b0162000c9e565b935062000d9a60e08b0162000c9e565b92506101008a0151915062000db36101208b0162000c8c565b90509295985092959850929598565b634e487b7160e01b600052601160045260246000fd5b6000821982111562000dee5762000dee62000dc2565b500190565b60008282101562000e085762000e0862000dc2565b500390565b600081600019048311821515161562000e2a5762000e2a62000dc2565b500290565b60008262000e4d57634e487b7160e01b600052601260045260246000fd5b500490565b6000825160005b8181101562000e75576020818601810151858301520162000e59565b8181111562000e85576000828501525b509190910192915050565b60006020828403121562000ea357600080fd5b815180151581146200099857600080fd5b60006020828403121562000ec757600080fd5b8151620009988162000c76565b611ec68062000ee46000396000f3fe6080604052600436106102515760003560e01c80637573af8e11610139578063ba730e53116100b6578063d1a93d181161007a578063d1a93d181461072d578063d5bb7f6714610740578063d7c9423014610760578063d992f1ab14610780578063ef0c256914610795578063fcc2c078146107b557600080fd5b8063ba730e5314610695578063c157253d146106b5578063c688d693146106d5578063cd3f29e9146106f5578063cfdc8b021461071a57600080fd5b8063a58379a1116100fd578063a58379a11461060e578063ae5b102e1461062e578063ae60bda41461064e578063ae682e2e14610666578063b1c6ffcf1461067e57600080fd5b80637573af8e1461057f5780638db462fc146105945780639477d85d146105b2578063974236cb146105d25780639e59e2f2146105e957600080fd5b8063427e3618116101d257806358ab4e901161019657806358ab4e90146104ae5780635cf4ee91146104da5780635f100c5c146104fa578063695639b71461051a5780636b4ed02a1461052f578063725f36261461054f57600080fd5b8063427e36181461041257806344276733146104255780634526bc3f1461045b5780634ba8ae811461047057806353b737991461049057600080fd5b806320357321116102195780632035732114610353578063252a1ccb146103685780632b5214161461038a578063357d7ec9146103ac57806337e36f83146103e057600080fd5b806306ae0df91461025657806308d4db14146102af57806308f97dd8146102dd57806319224cb4146102fd57806319786af81461031d575b600080fd5b34801561026257600080fd5b506040805180820182526000808252602091820152815180830183526033546001600160a01b03168082526034549183019182528351908152905191810191909152015b60405180910390f35b3480156102bb57600080fd5b506102cf6102ca3660046119eb565b6107d5565b6040519081526020016102a6565b3480156102e957600080fd5b506102cf6102f83660046119eb565b6107ef565b34801561030957600080fd5b506102cf610318366004611a04565b610835565b34801561032957600080fd5b506102cf610338366004611a64565b6001600160a01b031660009081526039602052604090205490565b34801561035f57600080fd5b506038546102cf565b34801561037457600080fd5b50610388610383366004611a64565b6108d5565b005b34801561039657600080fd5b50306000908152600160205260409020546102cf565b3480156103b857600080fd5b506103c1610974565b604080516001600160a01b0390931683526020830191909152016102a6565b3480156103ec57600080fd5b506036546001600160a01b03165b6040516001600160a01b0390911681526020016102a6565b610388610420366004611a81565b6109aa565b34801561043157600080fd5b506102cf610440366004611a64565b6001600160a01b031660009081526001602052604090205490565b34801561046757600080fd5b50610388610a3a565b34801561047c57600080fd5b5061038861048b3660046119eb565b610b94565b34801561049c57600080fd5b506037546001600160401b03166102cf565b3480156104ba57600080fd5b506104c56202000081565b60405163ffffffff90911681526020016102a6565b3480156104e657600080fd5b506102cf6104f5366004611ab1565b610ba1565b34801561050657600080fd5b50610388610515366004611aeb565b610cc3565b34801561052657600080fd5b506103c1610cce565b34801561053b57600080fd5b506102cf61054a3660046119eb565b610d0c565b34801561055b57600080fd5b5061056f61056a3660046119eb565b610d49565b60405190151581526020016102a6565b34801561058b57600080fd5b506103fa610d65565b3480156105a057600080fd5b506035546001600160a01b03166103fa565b3480156105be57600080fd5b506102cf6105cd366004611ab1565b610d91565b3480156105de57600080fd5b506104c56208000081565b3480156105f557600080fd5b50603654600160a01b90046001600160401b03166102cf565b34801561061a57600080fd5b506102cf610629366004611a04565b610dad565b34801561063a57600080fd5b50610388610649366004611b07565b610e3f565b34801561065a57600080fd5b506102cf600160fe1b81565b34801561067257600080fd5b506102cf600160ff1b81565b34801561068a57600080fd5b506104c56201000081565b3480156106a157600080fd5b506102cf6106b03660046119eb565b610ec4565b3480156106c157600080fd5b506102cf6106d0366004611ab1565b610ed8565b3480156106e157600080fd5b5061056f6106f0366004611b07565b610ee4565b34801561070157600080fd5b50603554600160a01b90046001600160401b03166102cf565b610388610728366004611b4a565b610f06565b61038861073b3660046119eb565b610ffc565b34801561074c57600080fd5b5061038861075b3660046119eb565b611006565b34801561076c57600080fd5b5061038861077b366004611a81565b611010565b34801561078c57600080fd5b506103c16111e1565b3480156107a157600080fd5b506103886107b0366004611c43565b61121f565b3480156107c157600080fd5b5061056f6107d03660046119eb565b6112f8565b60006107e96107e360385490565b83610ed8565b92915050565b6000806107fa610cce565b91505060006108076111e1565b9150506000610814610974565b91505061082c61082360385490565b86858585610dad565b95945050505050565b6000806108428787610ed8565b90506000670de0b6b3a76400006108598784611c86565b6108639190611ca5565b90506000670de0b6b3a764000061087a8785611c86565b6108849190611ca5565b90506000670de0b6b3a764000061089b8786611c86565b6108a59190611ca5565b905080826108b38587611cc7565b6108bd9190611cc7565b6108c79190611cc7565b9a9950505050505050505050565b6108e1620100006112f8565b6109065760405162461bcd60e51b81526004016108fd90611cdf565b60405180910390fd5b603554604080516001600160a01b03928316815291831660208301527f56193c420686fede45e4df7337054c2c9d6e74ea3d4773ab0d4f18197b08142d910160405180910390a1603580546001600160a01b0319166001600160a01b0392909216919091179055565b905090565b60008061097f610d65565b91506001600160a01b038216156109a1576037546001600160401b03166109a4565b60005b90509091565b60006109b560385490565b11806109d05750336109c5610d65565b6001600160a01b0316145b610a2c5760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920746865206973737565722063616e206275792074686520666972736044820152667420736861726560c81b60648201526084016108fd565b610a3682826114ce565b5050565b610a46620200006112f8565b610a625760405162461bcd60e51b81526004016108fd90611cdf565b6036546001600160a01b0316151580610a8c5750603654600160a01b90046001600160401b031615155b610ac65760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b60448201526064016108fd565b6035546036547fbf3d73ac4d2b03dfb17b5ef50c84465692647f0843b94f9ebc4062034a6f8e0b916001600160401b03600160a01b91829004811692610b0f9290041682611d06565b604080516001600160401b0393841681529290911660208301520160405180910390a1603654603580546001600160401b03600160a01b93849004811693601492610b5f92869290910416611d06565b82546001600160401b039182166101009390930a928302919092021990911617905550603680546001600160e01b0319169055565b610b9e8133611010565b50565b6000808315610bfc576006610bb7600186611d31565b610bc2906002611c86565b610bcd906001611cc7565b85610bd9600182611d31565b610be39190611c86565b610bed9190611c86565b610bf79190611ca5565b610bff565b60005b9050600084158015610c12575060018411155b610c875760066001610c248688611cc7565b610c2e9190611d31565b610c39906002611c86565b610c44906001611cc7565b610c4e8688611cc7565b6001610c5a888a611cc7565b610c649190611d31565b610c6e9190611c86565b610c789190611c86565b610c829190611ca5565b610c8a565b60005b90506000610c988383611d31565b9050613e80610caf82670de0b6b3a7640000611c86565b610cb99190611ca5565b9695505050505050565b610b9e81600061121f565b600080610ce36035546001600160a01b031690565b91506001600160a01b038216156109a157603554600160a01b90046001600160401b03166109a4565b600080610d17610cce565b9150506000610d246111e1565b9150506000610d31610974565b91505061082c610d4060385490565b86858585610835565b306000908152600160205260408120546107e9905b8316831490565b604080518082019091526033546001600160a01b03168152603454602082015260009061096f90611320565b6000610da6610da08385611d31565b83610ba1565b9392505050565b600080610dba8787610d91565b90506000670de0b6b3a7640000610dd18784611c86565b610ddb9190611ca5565b90506000670de0b6b3a7640000610df28785611c86565b610dfc9190611ca5565b90506000670de0b6b3a7640000610e138786611c86565b610e1d9190611ca5565b90508082610e2b8587611d31565b610e359190611d31565b6108c79190611d31565b610e4c600160ff1b6112f8565b610e685760405162461bcd60e51b81526004016108fd90611cdf565b610a368282610ebf33610e90876001600160a01b031660009081526001602052604090205490565b6001600160a01b0391909116600090815260016020526040902054600019808818821618908716919091171690565b611656565b60006107e9610ed260385490565b83610d91565b6000610da68383610ba1565b6001600160a01b038216600090815260016020526040812054610da690610d5e565b600054610100900460ff16610f215760005460ff1615610f25565b303b155b610f885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108fd565b600054610100900460ff16158015610faa576000805461ffff19166101011790555b610fb98a8a8a8a8a8a8a6116b0565b8215610fce57610fc983836114ce565b610fde565b3415610fde57610fde333461130a565b8015610ff0576000805461ff00191690555b50505050505050505050565b610b9e81336109aa565b610b9e3082610e3f565b600061101b60385490565b905082811161106c5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742073656c6c20746865206c61737420736861726500000000000060448201526064016108fd565b33600090815260396020526040902054838110156110c25760405162461bcd60e51b8152602060048201526013602482015272696e73756666696369656e742073686172657360681b60448201526064016108fd565b6110cc8482611d31565b336000908152603960205260409020556110e68483611d31565b60385560006110fe6110f88685611d31565b86610ba1565b9050600061110b8261176a565b92505050600061111e83600089336117ca565b9250505060008061112e856118fb565b9250509150611168818486886111449190611d31565b61114e9190611d31565b6111589190611d31565b6001600160a01b038a169061130a565b603854604080518b815260208101889052908101869052606081018590526080810183905260a08101919091526000906001600160a01b0380851691908b16907f952ff8d90add9fdeaeb478102d54441cf0cc0cbe53b1d99e51f747cdc8379e549060c0015b60405180910390a4505050505050505050565b6000806111f66036546001600160a01b031690565b91506001600160a01b038216156109a157603654600160a01b90046001600160401b03166109a4565b61122b620800006112f8565b6112475760405162461bcd60e51b81526004016108fd90611cdf565b7f4b356af3260ac232dff1ad2c4ce0f2d58640a02df64c6b965db54e527ce40c886033838360405161127b93929190611d48565b60405180910390a18160336112908282611d95565b50506001600160a01b03811615610a3657806001600160a01b0316637b80be6b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112dc57600080fd5b505af11580156112f0573d6000803e3d6000fd5b505050505050565b60006107e93383610ee4565b3b151590565b610a368282611908565b6000610da68383611955565b80516000903b156114c65760008083600001516001600160a01b0316611324856020015160405160240161135691815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634f558e7960e01b1790525161138b9190611dcb565b6000604051808303818686fa925050503d80600081146113c7576040519150601f19603f3d011682016040523d82523d6000602084013e6113cc565b606091505b509150915081156113f957808060200190518101906113eb9190611e06565b6113f9575060009392505050565b505060008083600001516001600160a01b0316611324856020015160405160240161142691815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166331a9108f60e11b1790525161145b9190611dcb565b6000604051808303818686fa925050503d8060008114611497576040519150601f19603f3d011682016040523d82523d6000602084013e61149c565b606091505b509150915081156114c357808060200190518101906114bb9190611e28565b949350505050565b50505b506000919050565b60006114d960385490565b6001600160a01b038316600090815260396020526040812080549293508592909190611506908490611cc7565b9091555061151690508382611cc7565b60385560006115258285610ba1565b905060006115328261176a565b92505050600061154583600188886117ca565b92505050600080611555856118fb565b925050915060008184868861156a9190611cc7565b6115749190611cc7565b61157e9190611cc7565b9050803410156115d05760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e742076616c756520737570706c696564000000000060448201526064016108fd565b803411156115ec576115ec6115e58234611d31565b339061130a565b603854604080518b815260208101899052908101879052606081018690526080810184905260a08101919091526001906001600160a01b0380861691908b16907f952ff8d90add9fdeaeb478102d54441cf0cc0cbe53b1d99e51f747cdc8379e549060c0016111ce565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b600054610100900460ff166116d75760405162461bcd60e51b81526004016108fd90611e45565b6116e0876119b7565b8551603380546001600160a01b0319166001600160a01b03928316179055602090960151603455603580549587166001600160e01b031996871617600160a01b6001600160401b0396871681029190911790915560368054949097169390951692909217908316909302929092179092556037805467ffffffffffffffff19169190921617905550565b6000806000611777610cce565b9093509150670de0b6b3a764000061178f8386611c86565b6117999190611ca5565b905080158015906117ba57506117b86001600160a01b03841682611314565b155b156117c3575060005b9193909250565b60008060006117d76111e1565b9093509150670de0b6b3a76400006117ef8389611c86565b6117f99190611ca5565b90506001600160a01b0383161580159061181257508415155b156118f157604080516001600160a01b0386166020820152871515918101919091526060810186905260009060800160405160208183030381529060405290506000846001600160a01b0316838360405161186d9190611dcb565b60006040518083038185875af1925050503d80600081146118aa576040519150601f19603f3d011682016040523d82523d6000602084013e6118af565b606091505b50509050806118ee5760405162461bcd60e51b815260206004820152600b60248201526a1cde5b98c819985a5b195960aa1b60448201526064016108fd565b50505b9450945094915050565b6000806000611777610974565b6119128282611955565b610a365760405162461bcd60e51b81526020600482015260146024820152733330b4b632b2103a379039b2b7321032ba3432b960611b60448201526064016108fd565b600080836001600160a01b031661132484604051600060405180830381858888f193505050503d80600081146119a7576040519150601f19603f3d011682016040523d82523d6000602084013e6119ac565b606091505b509095945050505050565b600054610100900460ff166119de5760405162461bcd60e51b81526004016108fd90611e45565b610b9e8160001980611656565b6000602082840312156119fd57600080fd5b5035919050565b600080600080600060a08688031215611a1c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6001600160a01b0381168114610b9e57600080fd5b8035611a5f81611a3f565b919050565b600060208284031215611a7657600080fd5b8135610da681611a3f565b60008060408385031215611a9457600080fd5b823591506020830135611aa681611a3f565b809150509250929050565b60008060408385031215611ac457600080fd5b50508035926020909101359150565b600060408284031215611ae557600080fd5b50919050565b600060408284031215611afd57600080fd5b610da68383611ad3565b60008060408385031215611b1a57600080fd5b8235611b2581611a3f565b946020939093013593505050565b80356001600160401b0381168114611a5f57600080fd5b6000806000806000806000806000898b03610140811215611b6a57600080fd5b8a35611b7581611a3f565b99506040601f1982011215611b8957600080fd5b50604051604081018181106001600160401b0382111715611bba57634e487b7160e01b600052604160045260246000fd5b60405260208b0135611bcb81611a3f565b815260408b013560208201529750611be560608b01611a54565b9650611bf360808b01611b33565b9550611c0160a08b01611a54565b9450611c0f60c08b01611b33565b9350611c1d60e08b01611b33565b92506101008a01359150611c346101208b01611a54565b90509295985092959850929598565b60008060608385031215611c5657600080fd5b611c608484611ad3565b91506040830135611aa681611a3f565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ca057611ca0611c70565b500290565b600082611cc257634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611cda57611cda611c70565b500190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b60006001600160401b03808316818516808303821115611d2857611d28611c70565b01949350505050565b600082821015611d4357611d43611c70565b500390565b83546001600160a01b0390811682526001850154602083015260a08201908435611d7181611a3f565b81811660408501525060208501356060840152808416608084015250949350505050565b8135611da081611a3f565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b6000825160005b81811015611dec5760208186018101518583015201611dd2565b81811115611dfb576000828501525b509190910192915050565b600060208284031215611e1857600080fd5b81518015158114610da657600080fd5b600060208284031215611e3a57600080fd5b8151610da681611a3f565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220626969dbf830ab7864037d367bd758d70a8d62dcc94d223f7f04b54c03e996bb64736f6c634300080f0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c80637573af8e11610139578063ba730e53116100b6578063d1a93d181161007a578063d1a93d181461072d578063d5bb7f6714610740578063d7c9423014610760578063d992f1ab14610780578063ef0c256914610795578063fcc2c078146107b557600080fd5b8063ba730e5314610695578063c157253d146106b5578063c688d693146106d5578063cd3f29e9146106f5578063cfdc8b021461071a57600080fd5b8063a58379a1116100fd578063a58379a11461060e578063ae5b102e1461062e578063ae60bda41461064e578063ae682e2e14610666578063b1c6ffcf1461067e57600080fd5b80637573af8e1461057f5780638db462fc146105945780639477d85d146105b2578063974236cb146105d25780639e59e2f2146105e957600080fd5b8063427e3618116101d257806358ab4e901161019657806358ab4e90146104ae5780635cf4ee91146104da5780635f100c5c146104fa578063695639b71461051a5780636b4ed02a1461052f578063725f36261461054f57600080fd5b8063427e36181461041257806344276733146104255780634526bc3f1461045b5780634ba8ae811461047057806353b737991461049057600080fd5b806320357321116102195780632035732114610353578063252a1ccb146103685780632b5214161461038a578063357d7ec9146103ac57806337e36f83146103e057600080fd5b806306ae0df91461025657806308d4db14146102af57806308f97dd8146102dd57806319224cb4146102fd57806319786af81461031d575b600080fd5b34801561026257600080fd5b506040805180820182526000808252602091820152815180830183526033546001600160a01b03168082526034549183019182528351908152905191810191909152015b60405180910390f35b3480156102bb57600080fd5b506102cf6102ca3660046119eb565b6107d5565b6040519081526020016102a6565b3480156102e957600080fd5b506102cf6102f83660046119eb565b6107ef565b34801561030957600080fd5b506102cf610318366004611a04565b610835565b34801561032957600080fd5b506102cf610338366004611a64565b6001600160a01b031660009081526039602052604090205490565b34801561035f57600080fd5b506038546102cf565b34801561037457600080fd5b50610388610383366004611a64565b6108d5565b005b34801561039657600080fd5b50306000908152600160205260409020546102cf565b3480156103b857600080fd5b506103c1610974565b604080516001600160a01b0390931683526020830191909152016102a6565b3480156103ec57600080fd5b506036546001600160a01b03165b6040516001600160a01b0390911681526020016102a6565b610388610420366004611a81565b6109aa565b34801561043157600080fd5b506102cf610440366004611a64565b6001600160a01b031660009081526001602052604090205490565b34801561046757600080fd5b50610388610a3a565b34801561047c57600080fd5b5061038861048b3660046119eb565b610b94565b34801561049c57600080fd5b506037546001600160401b03166102cf565b3480156104ba57600080fd5b506104c56202000081565b60405163ffffffff90911681526020016102a6565b3480156104e657600080fd5b506102cf6104f5366004611ab1565b610ba1565b34801561050657600080fd5b50610388610515366004611aeb565b610cc3565b34801561052657600080fd5b506103c1610cce565b34801561053b57600080fd5b506102cf61054a3660046119eb565b610d0c565b34801561055b57600080fd5b5061056f61056a3660046119eb565b610d49565b60405190151581526020016102a6565b34801561058b57600080fd5b506103fa610d65565b3480156105a057600080fd5b506035546001600160a01b03166103fa565b3480156105be57600080fd5b506102cf6105cd366004611ab1565b610d91565b3480156105de57600080fd5b506104c56208000081565b3480156105f557600080fd5b50603654600160a01b90046001600160401b03166102cf565b34801561061a57600080fd5b506102cf610629366004611a04565b610dad565b34801561063a57600080fd5b50610388610649366004611b07565b610e3f565b34801561065a57600080fd5b506102cf600160fe1b81565b34801561067257600080fd5b506102cf600160ff1b81565b34801561068a57600080fd5b506104c56201000081565b3480156106a157600080fd5b506102cf6106b03660046119eb565b610ec4565b3480156106c157600080fd5b506102cf6106d0366004611ab1565b610ed8565b3480156106e157600080fd5b5061056f6106f0366004611b07565b610ee4565b34801561070157600080fd5b50603554600160a01b90046001600160401b03166102cf565b610388610728366004611b4a565b610f06565b61038861073b3660046119eb565b610ffc565b34801561074c57600080fd5b5061038861075b3660046119eb565b611006565b34801561076c57600080fd5b5061038861077b366004611a81565b611010565b34801561078c57600080fd5b506103c16111e1565b3480156107a157600080fd5b506103886107b0366004611c43565b61121f565b3480156107c157600080fd5b5061056f6107d03660046119eb565b6112f8565b60006107e96107e360385490565b83610ed8565b92915050565b6000806107fa610cce565b91505060006108076111e1565b9150506000610814610974565b91505061082c61082360385490565b86858585610dad565b95945050505050565b6000806108428787610ed8565b90506000670de0b6b3a76400006108598784611c86565b6108639190611ca5565b90506000670de0b6b3a764000061087a8785611c86565b6108849190611ca5565b90506000670de0b6b3a764000061089b8786611c86565b6108a59190611ca5565b905080826108b38587611cc7565b6108bd9190611cc7565b6108c79190611cc7565b9a9950505050505050505050565b6108e1620100006112f8565b6109065760405162461bcd60e51b81526004016108fd90611cdf565b60405180910390fd5b603554604080516001600160a01b03928316815291831660208301527f56193c420686fede45e4df7337054c2c9d6e74ea3d4773ab0d4f18197b08142d910160405180910390a1603580546001600160a01b0319166001600160a01b0392909216919091179055565b905090565b60008061097f610d65565b91506001600160a01b038216156109a1576037546001600160401b03166109a4565b60005b90509091565b60006109b560385490565b11806109d05750336109c5610d65565b6001600160a01b0316145b610a2c5760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920746865206973737565722063616e206275792074686520666972736044820152667420736861726560c81b60648201526084016108fd565b610a3682826114ce565b5050565b610a46620200006112f8565b610a625760405162461bcd60e51b81526004016108fd90611cdf565b6036546001600160a01b0316151580610a8c5750603654600160a01b90046001600160401b031615155b610ac65760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b60448201526064016108fd565b6035546036547fbf3d73ac4d2b03dfb17b5ef50c84465692647f0843b94f9ebc4062034a6f8e0b916001600160401b03600160a01b91829004811692610b0f9290041682611d06565b604080516001600160401b0393841681529290911660208301520160405180910390a1603654603580546001600160401b03600160a01b93849004811693601492610b5f92869290910416611d06565b82546001600160401b039182166101009390930a928302919092021990911617905550603680546001600160e01b0319169055565b610b9e8133611010565b50565b6000808315610bfc576006610bb7600186611d31565b610bc2906002611c86565b610bcd906001611cc7565b85610bd9600182611d31565b610be39190611c86565b610bed9190611c86565b610bf79190611ca5565b610bff565b60005b9050600084158015610c12575060018411155b610c875760066001610c248688611cc7565b610c2e9190611d31565b610c39906002611c86565b610c44906001611cc7565b610c4e8688611cc7565b6001610c5a888a611cc7565b610c649190611d31565b610c6e9190611c86565b610c789190611c86565b610c829190611ca5565b610c8a565b60005b90506000610c988383611d31565b9050613e80610caf82670de0b6b3a7640000611c86565b610cb99190611ca5565b9695505050505050565b610b9e81600061121f565b600080610ce36035546001600160a01b031690565b91506001600160a01b038216156109a157603554600160a01b90046001600160401b03166109a4565b600080610d17610cce565b9150506000610d246111e1565b9150506000610d31610974565b91505061082c610d4060385490565b86858585610835565b306000908152600160205260408120546107e9905b8316831490565b604080518082019091526033546001600160a01b03168152603454602082015260009061096f90611320565b6000610da6610da08385611d31565b83610ba1565b9392505050565b600080610dba8787610d91565b90506000670de0b6b3a7640000610dd18784611c86565b610ddb9190611ca5565b90506000670de0b6b3a7640000610df28785611c86565b610dfc9190611ca5565b90506000670de0b6b3a7640000610e138786611c86565b610e1d9190611ca5565b90508082610e2b8587611d31565b610e359190611d31565b6108c79190611d31565b610e4c600160ff1b6112f8565b610e685760405162461bcd60e51b81526004016108fd90611cdf565b610a368282610ebf33610e90876001600160a01b031660009081526001602052604090205490565b6001600160a01b0391909116600090815260016020526040902054600019808818821618908716919091171690565b611656565b60006107e9610ed260385490565b83610d91565b6000610da68383610ba1565b6001600160a01b038216600090815260016020526040812054610da690610d5e565b600054610100900460ff16610f215760005460ff1615610f25565b303b155b610f885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108fd565b600054610100900460ff16158015610faa576000805461ffff19166101011790555b610fb98a8a8a8a8a8a8a6116b0565b8215610fce57610fc983836114ce565b610fde565b3415610fde57610fde333461130a565b8015610ff0576000805461ff00191690555b50505050505050505050565b610b9e81336109aa565b610b9e3082610e3f565b600061101b60385490565b905082811161106c5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742073656c6c20746865206c61737420736861726500000000000060448201526064016108fd565b33600090815260396020526040902054838110156110c25760405162461bcd60e51b8152602060048201526013602482015272696e73756666696369656e742073686172657360681b60448201526064016108fd565b6110cc8482611d31565b336000908152603960205260409020556110e68483611d31565b60385560006110fe6110f88685611d31565b86610ba1565b9050600061110b8261176a565b92505050600061111e83600089336117ca565b9250505060008061112e856118fb565b9250509150611168818486886111449190611d31565b61114e9190611d31565b6111589190611d31565b6001600160a01b038a169061130a565b603854604080518b815260208101889052908101869052606081018590526080810183905260a08101919091526000906001600160a01b0380851691908b16907f952ff8d90add9fdeaeb478102d54441cf0cc0cbe53b1d99e51f747cdc8379e549060c0015b60405180910390a4505050505050505050565b6000806111f66036546001600160a01b031690565b91506001600160a01b038216156109a157603654600160a01b90046001600160401b03166109a4565b61122b620800006112f8565b6112475760405162461bcd60e51b81526004016108fd90611cdf565b7f4b356af3260ac232dff1ad2c4ce0f2d58640a02df64c6b965db54e527ce40c886033838360405161127b93929190611d48565b60405180910390a18160336112908282611d95565b50506001600160a01b03811615610a3657806001600160a01b0316637b80be6b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112dc57600080fd5b505af11580156112f0573d6000803e3d6000fd5b505050505050565b60006107e93383610ee4565b3b151590565b610a368282611908565b6000610da68383611955565b80516000903b156114c65760008083600001516001600160a01b0316611324856020015160405160240161135691815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634f558e7960e01b1790525161138b9190611dcb565b6000604051808303818686fa925050503d80600081146113c7576040519150601f19603f3d011682016040523d82523d6000602084013e6113cc565b606091505b509150915081156113f957808060200190518101906113eb9190611e06565b6113f9575060009392505050565b505060008083600001516001600160a01b0316611324856020015160405160240161142691815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166331a9108f60e11b1790525161145b9190611dcb565b6000604051808303818686fa925050503d8060008114611497576040519150601f19603f3d011682016040523d82523d6000602084013e61149c565b606091505b509150915081156114c357808060200190518101906114bb9190611e28565b949350505050565b50505b506000919050565b60006114d960385490565b6001600160a01b038316600090815260396020526040812080549293508592909190611506908490611cc7565b9091555061151690508382611cc7565b60385560006115258285610ba1565b905060006115328261176a565b92505050600061154583600188886117ca565b92505050600080611555856118fb565b925050915060008184868861156a9190611cc7565b6115749190611cc7565b61157e9190611cc7565b9050803410156115d05760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e742076616c756520737570706c696564000000000060448201526064016108fd565b803411156115ec576115ec6115e58234611d31565b339061130a565b603854604080518b815260208101899052908101879052606081018690526080810184905260a08101919091526001906001600160a01b0380861691908b16907f952ff8d90add9fdeaeb478102d54441cf0cc0cbe53b1d99e51f747cdc8379e549060c0016111ce565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b600054610100900460ff166116d75760405162461bcd60e51b81526004016108fd90611e45565b6116e0876119b7565b8551603380546001600160a01b0319166001600160a01b03928316179055602090960151603455603580549587166001600160e01b031996871617600160a01b6001600160401b0396871681029190911790915560368054949097169390951692909217908316909302929092179092556037805467ffffffffffffffff19169190921617905550565b6000806000611777610cce565b9093509150670de0b6b3a764000061178f8386611c86565b6117999190611ca5565b905080158015906117ba57506117b86001600160a01b03841682611314565b155b156117c3575060005b9193909250565b60008060006117d76111e1565b9093509150670de0b6b3a76400006117ef8389611c86565b6117f99190611ca5565b90506001600160a01b0383161580159061181257508415155b156118f157604080516001600160a01b0386166020820152871515918101919091526060810186905260009060800160405160208183030381529060405290506000846001600160a01b0316838360405161186d9190611dcb565b60006040518083038185875af1925050503d80600081146118aa576040519150601f19603f3d011682016040523d82523d6000602084013e6118af565b606091505b50509050806118ee5760405162461bcd60e51b815260206004820152600b60248201526a1cde5b98c819985a5b195960aa1b60448201526064016108fd565b50505b9450945094915050565b6000806000611777610974565b6119128282611955565b610a365760405162461bcd60e51b81526020600482015260146024820152733330b4b632b2103a379039b2b7321032ba3432b960611b60448201526064016108fd565b600080836001600160a01b031661132484604051600060405180830381858888f193505050503d80600081146119a7576040519150601f19603f3d011682016040523d82523d6000602084013e6119ac565b606091505b509095945050505050565b600054610100900460ff166119de5760405162461bcd60e51b81526004016108fd90611e45565b610b9e8160001980611656565b6000602082840312156119fd57600080fd5b5035919050565b600080600080600060a08688031215611a1c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6001600160a01b0381168114610b9e57600080fd5b8035611a5f81611a3f565b919050565b600060208284031215611a7657600080fd5b8135610da681611a3f565b60008060408385031215611a9457600080fd5b823591506020830135611aa681611a3f565b809150509250929050565b60008060408385031215611ac457600080fd5b50508035926020909101359150565b600060408284031215611ae557600080fd5b50919050565b600060408284031215611afd57600080fd5b610da68383611ad3565b60008060408385031215611b1a57600080fd5b8235611b2581611a3f565b946020939093013593505050565b80356001600160401b0381168114611a5f57600080fd5b6000806000806000806000806000898b03610140811215611b6a57600080fd5b8a35611b7581611a3f565b99506040601f1982011215611b8957600080fd5b50604051604081018181106001600160401b0382111715611bba57634e487b7160e01b600052604160045260246000fd5b60405260208b0135611bcb81611a3f565b815260408b013560208201529750611be560608b01611a54565b9650611bf360808b01611b33565b9550611c0160a08b01611a54565b9450611c0f60c08b01611b33565b9350611c1d60e08b01611b33565b92506101008a01359150611c346101208b01611a54565b90509295985092959850929598565b60008060608385031215611c5657600080fd5b611c608484611ad3565b91506040830135611aa681611a3f565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ca057611ca0611c70565b500290565b600082611cc257634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611cda57611cda611c70565b500190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b60006001600160401b03808316818516808303821115611d2857611d28611c70565b01949350505050565b600082821015611d4357611d43611c70565b500390565b83546001600160a01b0390811682526001850154602083015260a08201908435611d7181611a3f565b81811660408501525060208501356060840152808416608084015250949350505050565b8135611da081611a3f565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b6000825160005b81811015611dec5760208186018101518583015201611dd2565b81811115611dfb576000828501525b509190910192915050565b600060208284031215611e1857600080fd5b81518015158114610da657600080fd5b600060208284031215611e3a57600080fd5b8151610da681611a3f565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220626969dbf830ab7864037d367bd758d70a8d62dcc94d223f7f04b54c03e996bb64736f6c634300080f0033",
  "devdoc": {
    "details": "Based on the friend.tech FriendtechSharesV1.sol",
    "kind": "dev",
    "methods": {
      "buyShares(uint256)": {
        "details": "Depending on the implementation, ERC20 token payment may be required instead of ETH.      In such a case, implementation must through if ETH is sent, effectively overriding      the function definition as non-payable",
        "params": {
          "amount": "amount of the shares to buy"
        }
      },
      "buySharesTo(uint256,address)": {
        "details": "Depending on the implementation, ERC20 token payment may be required instead of ETH.      In such a case, implementation must through if ETH is sent, effectively overriding      the function definition as non-payable",
        "params": {
          "amount": "amount of the shares to buy",
          "beneficiary": "an address receiving the shares"
        }
      },
      "constructor": {
        "details": "Deploys the ETHShares instance and initializes it",
        "params": {
          "_amount": "how many shares to buy immediately upon \"post-construction\", can be zero",
          "_beneficiary": "the address receiving the shares bought immediately (must be set      if `_amount` is not zero)",
          "_holdersFeeDestination": "shares holders fee destination, the HoldersRewardsDistributor contract      the shares holders fee is sent to",
          "_holdersFeePercent": "shares holders fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%",
          "_owner": "the address receiving all the RBAC permissions on the contract",
          "_protocolFeeDestination": "protocol fee destination, the address protocol fee is sent to",
          "_protocolFeePercent": "protocol fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%",
          "_sharesSubject": "shares subject, usually defined as NFT (ERC721 contract address + NFT ID)",
          "_subjectFeePercent": "subject fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "getBuyPrice(uint256)": {
        "params": {
          "amount": "number of shares to buy"
        },
        "returns": {
          "_0": "the price of the shares to buy"
        }
      },
      "getBuyPrice(uint256,uint256)": {
        "params": {
          "amount": "number of shares to buy",
          "supply": "total shares supply"
        },
        "returns": {
          "_0": "the price of the shares to buy"
        }
      },
      "getBuyPriceAfterFee(uint256)": {
        "params": {
          "amount": "number of shares to buy"
        },
        "returns": {
          "_0": "the price of the shares to buy"
        }
      },
      "getBuyPriceAfterFee(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "amount": "number of shares to buy",
          "holdersFeePercent": "shares holders fee percent",
          "protocolFeePercent": "protocol fee percent",
          "subjectFeePercent": "protocol fee percent",
          "supply": "total shares supply"
        },
        "returns": {
          "_0": "the price of the shares to buy"
        }
      },
      "getHoldersFeeDestination()": {
        "details": "Immutable, client applications may cache this value; holders fee destination is not      an arbitrary address capable of receiving ETH or ERC20, but a HoldersRewardsDistributor      smart contract, which not only receives the fees but also receives updated on the      trading activity in the shares contract",
        "returns": {
          "_0": "the contract where the holders fee is sent to"
        }
      },
      "getHoldersFeeInfo()": {
        "details": "Implementation must always return zero fee percent if fee destination is zero",
        "returns": {
          "feeDestination": "shares holders fee destination",
          "feePercent": "shares holders fee percent, zero if holders fee destination is zero"
        }
      },
      "getHoldersFeePercent()": {
        "details": "Immutable, client applications may cache this value",
        "returns": {
          "_0": "shares holders fee percent with the 18 decimals (10^18 is 100%)"
        }
      },
      "getPrice(uint256,uint256)": {
        "params": {
          "a": "amount, number of shares to buy/sell",
          "s": "supply, total shares supply"
        },
        "returns": {
          "_0": "the price of the shares (all `amount` amount)"
        }
      },
      "getProtocolFeeDestination()": {
        "details": "Mutable, can be changed by the protocol fee manager",
        "returns": {
          "_0": "the address where the protocol fee is sent to"
        }
      },
      "getProtocolFeeInfo()": {
        "details": "Implementation must always return zero fee percent if fee destination is zero address",
        "returns": {
          "feeDestination": "protocol fee destination",
          "feePercent": "protocol fee percent, zero if protocol fee destination is zero"
        }
      },
      "getProtocolFeePercent()": {
        "details": "Immutable, client applications may cache this value",
        "returns": {
          "_0": "protocol fee percent with the 18 decimals (10^18 is 100%)"
        }
      },
      "getRole(address)": {
        "details": "Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts",
        "params": {
          "operator": "address of a user to read permissions for,      or self address to read global features of the smart contract"
        }
      },
      "getSellPrice(uint256)": {
        "params": {
          "amount": "number of shares to sell"
        },
        "returns": {
          "_0": "the price of the shares to sell"
        }
      },
      "getSellPrice(uint256,uint256)": {
        "params": {
          "amount": "number of shares to sell",
          "supply": "total shares supply"
        },
        "returns": {
          "_0": "the price of the shares to sell"
        }
      },
      "getSellPriceAfterFee(uint256)": {
        "params": {
          "amount": "number of shares to sell"
        },
        "returns": {
          "_0": "the price of the shares to sell"
        }
      },
      "getSellPriceAfterFee(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "amount": "number of shares to sell",
          "holdersFeePercent": "shares holders fee percent",
          "protocolFeePercent": "protocol fee percent",
          "subjectFeePercent": "protocol fee percent",
          "supply": "total shares supply"
        },
        "returns": {
          "_0": "the price of the shares to sell"
        }
      },
      "getSharesBalance(address)": {
        "params": {
          "holder": "the address to check the balance for"
        },
        "returns": {
          "balance": "number of shares the holder has"
        }
      },
      "getSharesIssuer()": {
        "details": "Mutable, changes (potentially frequently and unpredictably) when the NFT owner changes;      subject to the front-run attacks, off-chain client applications must not rely on this address      in anyway",
        "returns": {
          "nftOwner": "subject issuer, the owner of the NFT"
        }
      },
      "getSharesSubject()": {
        "details": "Immutable, client applications may cache this value",
        "returns": {
          "_0": "Shares subject as a SharesSubject struct, this is an NFT if all currently known implementations"
        }
      },
      "getSharesSupply()": {
        "returns": {
          "supply": "total shares supply"
        }
      },
      "getSubjectFeeInfo()": {
        "details": "Implementation must always return zero fee percent if fee destination is zero address",
        "returns": {
          "feeDestination": "protocol fee destination",
          "feePercent": "protocol fee percent, zero if subject fee destination is zero"
        }
      },
      "getSubjectFeePercent()": {
        "details": "Immutable, client applications may cache this value",
        "returns": {
          "_0": "subject fee percent with the 18 decimals (10^18 is 100%)"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "details": "Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.",
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "postConstruct(address,(address,uint256),address,uint64,address,uint64,uint64,uint256,address)": {
        "details": "\"Constructor replacement\" for initializable, must be execute during or immediately after deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers",
        "params": {
          "_amount": "how many shares to buy immediately upon \"post-construction\", can be zero",
          "_beneficiary": "the address receiving the shares bought immediately (must be set      if `_amount` is not zero)",
          "_holdersFeeDestination": "shares holders fee destination, the HoldersRewardsDistributor contract      the shares holders fee is sent to",
          "_holdersFeePercent": "shares holders fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%",
          "_owner": "the address receiving all the RBAC permissions on the contract",
          "_protocolFeeDestination": "protocol fee destination, the address protocol fee is sent to",
          "_protocolFeePercent": "protocol fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%",
          "_sharesSubject": "shares subject, usually defined as NFT (ERC721 contract address + NFT ID)",
          "_subjectFeePercent": "subject fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%"
        }
      },
      "sellShares(uint256)": {
        "details": "Depending on the implementation, ERC20 token may be payed instead of ETH.",
        "params": {
          "amount": "amount of the shares to sell"
        }
      },
      "sellSharesTo(uint256,address)": {
        "details": "Depending on the implementation, ERC20 token may be payed instead of ETH.",
        "params": {
          "amount": "amount of the shares to sell",
          "beneficiary": "an address receiving the funds from the sale"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateProtocolFeeDestination(address)": {
        "details": "This is a restricted access function which should be accessible only from the      MultiSig wallet controlling the protocol, so that its usage is not scalable",
        "params": {
          "_protocolFeeDestination": "new protocol fee destination address to set"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for,       or self address to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      },
      "updateSharesSubject((address,uint256))": {
        "details": "This is a restricted access function which should be accessible only from the      MultiSig wallet controlling the protocol, so that its usage is not scalable",
        "params": {
          "_sharesSubject": "new subject to set"
        }
      },
      "updateSharesSubject((address,uint256),address)": {
        "details": "This is a restricted access function which should be accessible only from the      MultiSig wallet controlling the protocol, so that its usage is not scalable",
        "params": {
          "_factory": "shares factory contract to notify about the update, optional      if set to zero, the notification is not done",
          "_sharesSubject": "new subject to set"
        }
      }
    },
    "title": "ETH Shares",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_HOLDERS_FEE_MANAGER()": {
        "notice": "Holders fee [disable] manager can disable the shares holders fee functionality;      the manager cannot enable it back"
      },
      "ROLE_PROTOCOL_FEE_MANAGER()": {
        "notice": "Protocol fee destination manager is responsible for updating the address collecting the      protocol fee destination, that is `protocolFeeDestination`; the manager cannot update the fee percent"
      },
      "ROLE_SHARES_SUBJECT_MANAGER()": {
        "notice": "Shares subject manager is responsible for updating the \"shares subject\"      in case of emergency, for example if underlying NFT was stolen"
      },
      "ROLE_UPGRADE_MANAGER()": {
        "notice": "Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable"
      },
      "buyShares(uint256)": {
        "notice": "Buy `amount` of shares. Sender has to supply `getBuyPriceAfterFee(amount)` ETH.      First share can be bought only by current subject issuer."
      },
      "buySharesTo(uint256,address)": {
        "notice": "Buy `amount` of shares in the favor of the address specified (beneficiary).      Sender has to supply `getBuyPriceAfterFee(amount)` ETH.      First share can be bought only by current subject issuer."
      },
      "disableHoldersFee()": {
        "notice": "Disables shares holders fee functionality; detaches shares contract from      the HoldersRewardsDistributor, stops sending fees, stops sending syncsIncreases the protocol fee by the value of the disabled shares holders fee,      so that the sum of all the fees remains the sameOnce disabled, the holders fee functionality cannot be enabled back"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "getBuyPrice(uint256)": {
        "notice": "Current price of the `amount` of shares to buy; calculated based on      the current total shares supply"
      },
      "getBuyPrice(uint256,uint256)": {
        "notice": "The price of the `amount` of shares to buy calculated based on      the specified total shares supply"
      },
      "getBuyPriceAfterFee(uint256)": {
        "notice": "Current price of the `amount` of shares to buy, including all fees;      calculated based on the current total shares supply and fees percentages"
      },
      "getBuyPriceAfterFee(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "The price of the `amount` of shares to buy, including all fees;      calculated based on the specified total shares supply and fees percentages"
      },
      "getHoldersFeeDestination()": {
        "notice": "Shares holders reward distributor contract attached to the shares contract      in order to receive its portion of the fees to be distributed among the shares holders"
      },
      "getHoldersFeeInfo()": {
        "notice": "Shares holders fee destination and shares holders fee percent as a tuple;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%"
      },
      "getHoldersFeePercent()": {
        "notice": "Shares holders fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%Shares holders fee is sent to the holders fee destination (see `getHoldersFeeDestination`)"
      },
      "getPrice(uint256,uint256)": {
        "notice": "Bonding curve function definition. The function calculating the price      of the `amount` of shares given the current total supply `supply`"
      },
      "getProtocolFeeDestination()": {
        "notice": "Protocol fee destination, the address protocol fee is sent to"
      },
      "getProtocolFeeInfo()": {
        "notice": "Protocol fee destination and protocol fee percent as a tuple;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%"
      },
      "getProtocolFeePercent()": {
        "notice": "Protocol fee percent, applied to all the buy and sell operations;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%Protocol fee is sent to the protocol fee destination (see `getProtocolFeeDestination`)"
      },
      "getRole(address)": {
        "notice": "Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      },
      "getSellPrice(uint256)": {
        "notice": "Current price of the `amount` of shares to sell; calculated based on      the current total shares supply"
      },
      "getSellPrice(uint256,uint256)": {
        "notice": "The price of the `amount` of shares to sell calculated based on      the specified total shares supply"
      },
      "getSellPriceAfterFee(uint256)": {
        "notice": "Current price of the `amount` of shares to sell, including all fees;      calculated based on the current total shares supply and fees percentages"
      },
      "getSellPriceAfterFee(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "The price of the `amount` of shares to sell, including all fees;      calculated based on the specified total shares supply and fees percentages"
      },
      "getSharesBalance(address)": {
        "notice": "Shares balance of the given holder; this function is similar to ERC20.balanceOf()"
      },
      "getSharesIssuer()": {
        "notice": "Shares issuer, the receiver of the shares fees"
      },
      "getSharesSubject()": {
        "notice": "Shares subject, usually defined as NFT (ERC721 contract address + NFT ID)"
      },
      "getSharesSupply()": {
        "notice": "Total amount of the shares in existence, the sum of all individual shares balances;      this function is similar to ERC20.totalSupply()"
      },
      "getSubjectFeeInfo()": {
        "notice": "Subject fee destination and subject fee percent as a tuple;      subject fee destination is shares issuer address;      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%;"
      },
      "getSubjectFeePercent()": {
        "notice": "Subject fee percent, applied to all the buy and sell operations,      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%Subject fee is sent to the subject fee issuer (see `getSharesIssuer`)"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "sellShares(uint256)": {
        "notice": "Sell `amount` of shares. Sender gets `getSellPriceAfterFee(amount)` of ETH.      Last share cannot be sold."
      },
      "sellSharesTo(uint256,address)": {
        "notice": "Sell `amount` of shares in the favor of the address specified (beneficiary).      The beneficiary gets `getSellPriceAfterFee(amount)` of ETH.      Last share cannot be sold."
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateProtocolFeeDestination(address)": {
        "notice": "Updates the protocol fee destination address `protocolFeeDestination`"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "updateSharesSubject((address,uint256))": {
        "notice": "Updates the shares subject"
      },
      "updateSharesSubject((address,uint256),address)": {
        "notice": "Updates the shares subject and optionally notifies the factory about the update;      update fails if the factory notification fails"
      }
    },
    "notice": "TradeableShares implementation using native ETH for payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2096,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2099,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 31982,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "userRoles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31987,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6893,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "sharesSubject",
        "offset": 0,
        "slot": "51",
        "type": "t_struct(SharesSubject)12007_storage"
      },
      {
        "astId": 6896,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "protocolFeeDestination",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 6899,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "protocolFeePercent",
        "offset": 20,
        "slot": "53",
        "type": "t_uint64"
      },
      {
        "astId": 6903,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "holdersFeeDestination",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(HoldersRewardsDistributor)8829"
      },
      {
        "astId": 6906,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "holdersFeePercent",
        "offset": 20,
        "slot": "54",
        "type": "t_uint64"
      },
      {
        "astId": 6909,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "subjectFeePercent",
        "offset": 0,
        "slot": "55",
        "type": "t_uint64"
      },
      {
        "astId": 6912,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "sharesSupply",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 6917,
        "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
        "label": "sharesBalances",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HoldersRewardsDistributor)8829": {
        "encoding": "inplace",
        "label": "contract HoldersRewardsDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(SharesSubject)12007_storage": {
        "encoding": "inplace",
        "label": "struct TradeableShares.SharesSubject",
        "members": [
          {
            "astId": 12003,
            "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12006,
            "contract": "contracts/bonding_curves/ETHShares.sol:ETHShares",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}